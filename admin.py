import asyncio
import os
import random
import aiosqlite
import logging
import uuid
import json
import pytz
import io
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from decimal import Decimal
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode
from excel_utils import create_payments_excel, create_registrations_excel
from database import (
    get_payments_by_date, check_subscription, get_all_users_stats, get_user_trainedmodels,
    get_user_payments, get_generation_log_for_cost, get_total_remaining_photos,
    get_paid_users, get_non_paid_users, get_user_generation_stats,
    get_user_rating_and_registration, delete_user, block_user, is_user_blocked, log_user_action,
    get_active_trainedmodel, update_user_balance, get_user_activity_stats,
    get_referral_stats, search_users, get_user_logs, schedule_broadcast,
    get_scheduled_broadcasts, get_registrations_by_date
)
from config import IMAGE_GENERATION_MODELS, ADMIN_IDS, DATABASE_PATH
from keyboards import create_admin_keyboard, create_admin_user_actions_keyboard, create_avatar_style_choice_keyboard
from handlers.utils import (
    safe_escape_markdown as escape_md, send_message_with_fallback, check_resources,
    truncate_text, safe_escape_markdown, create_isolated_context, clean_admin_context
)
from generation import generate_image, handle_generate_video

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
(
    AWAITING_BROADCAST_MESSAGE, AWAITING_BROADCAST_MEDIA_CONFIRM,
    AWAITING_PAYMENT_DATES, AWAITING_USER_SEARCH, AWAITING_BALANCE_CHANGE,
    AWAITING_BROADCAST_FILTERS, AWAITING_BROADCAST_SCHEDULE,
    AWAITING_BLOCK_REASON
) = range(8)
# === –í handlers/admin.py –ó–ê–ú–ï–ù–ò–¢–ï —Ñ—É–Ω–∫—Ü–∏–∏ get_all_failed_avatars –∏ delete_all_failed_avatars ===

# === –í handlers/admin.py –ó–ê–ú–ï–ù–ò–¢–ï —Ñ—É–Ω–∫—Ü–∏—é get_all_failed_avatars ===

async def get_all_failed_avatars() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    failed_avatars = []
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("""
            SELECT 
                tm.avatar_id,
                tm.user_id,
                tm.model_id,
                tm.model_version,
                tm.status,
                tm.prediction_id,
                tm.avatar_name,
                tm.created_at,
                u.username,
                u.first_name
            FROM user_trainedmodels tm
            LEFT JOIN users u ON tm.user_id = u.user_id
            WHERE tm.status = 'failed' 
               OR tm.status = 'error' 
               OR tm.status IS NULL
               OR tm.status = ''
            ORDER BY tm.created_at DESC
        """)
        
        rows = await cursor.fetchall()
        for row in rows:
            failed_avatars.append({
                'avatar_id': row['avatar_id'],
                'user_id': row['user_id'],
                'model_id': row['model_id'],
                'model_version': row['model_version'],
                'status': row['status'] or 'unknown',
                'prediction_id': row['prediction_id'],
                'avatar_name': row['avatar_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏',
                'created_at': row['created_at'],
                'username': row['username'],
                'full_name': row['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
            })
    
    return failed_avatars

async def delete_all_failed_avatars() -> int:
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï –∞–≤–∞—Ç–∞—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            cursor = await db.execute("""
                DELETE FROM user_trainedmodels 
                WHERE status = 'failed' 
                   OR status = 'error' 
                   OR status IS NULL
                   OR status = ''
            """)
            
            deleted_count = cursor.rowcount
            await db.commit()
            
            logger.info(f"Admin deleted {deleted_count} failed avatars")
            return deleted_count
            
    except Exception as e:
        logger.error(f"Error deleting all failed avatars: {e}")
        return 0

async def admin_show_failed_avatars(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—É –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã"""
    query = update.callback_query if hasattr(update, 'callback_query') else None
    user_id = update.effective_user.id if update.effective_user else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
    failed_avatars = await get_all_failed_avatars()
    
    if not failed_avatars:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await send_message_with_fallback(
            context.bot,
            user_id,
            "‚úÖ –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏\\!",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN_V2,
            update_or_query=update
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_with_errors = {}
    for avatar in failed_avatars:
        user_id_key = avatar['user_id']
        if user_id_key not in users_with_errors:
            users_with_errors[user_id_key] = {
                'username': avatar['username'],
                'full_name': avatar['full_name'],
                'avatars': []
            }
        users_with_errors[user_id_key]['avatars'].append(avatar)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"‚ùå *–í—Å–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(failed_avatars)}*\n"
    text += f"üë• *–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_errors)}*\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i, (user_id_key, user_data) in enumerate(list(users_with_errors.items())[:10], 1):
        user_info = f"{user_data['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}"
        if user_data['username']:
            user_info += f" \\(@{user_data['username']}\\)"
        user_info += f" \\[ID: {user_id_key}\\]"
        
        text += f"*{i}\\. {user_info}*\n"
        text += f"   –û—à–∏–±–æ–∫: {len(user_data['avatars'])}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
        for j, avatar in enumerate(user_data['avatars'][:3], 1):
            text += f"   ‚Ä¢ {avatar['avatar_name']} \\({avatar['status']}\\)\n"
        
        if len(user_data['avatars']) > 3:
            text += f"   ‚Ä¢ \\.\\.\\. –∏ –µ—â–µ {len(user_data['avatars']) - 3}\n"
        text += "\n"
    
    if len(users_with_errors) > 10:
        text += f"\n_\\.\\.\\.–∏ –µ—â–µ {len(users_with_errors) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="admin_delete_all_failed")],
        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await send_message_with_fallback(
        context.bot,
        user_id,
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
        update_or_query=update
    )

async def admin_confirm_delete_all_failed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    failed_avatars = await get_all_failed_avatars()
    total_count = len(failed_avatars)
    
    text = (
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\\!*\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å *{total_count}* –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏\\.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨*\\!\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
    )
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–ï", callback_data="admin_confirm_delete_all"),
            InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="admin_failed_avatars")
        ]
    ])
    
    await query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def admin_execute_delete_all_failed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    await query.answer("üîÑ –£–¥–∞–ª—è—é –∞–≤–∞—Ç–∞—Ä—ã...", show_alert=False)
    
    # –£–¥–∞–ª—è–µ–º
    deleted_count = await delete_all_failed_avatars()
    
    if deleted_count > 0:
        text = (
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ\\!*\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: *{deleted_count}*\n\n"
            f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\\."
        )
    else:
        text = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\."
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text = escape_md(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    reply_markup = await create_admin_keyboard()
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

async def send_daily_payments_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º."""
    bot = context.bot
    msk_tz = pytz.timezone('Europe/Moscow')
    today = datetime.now(msk_tz)
    yesterday = (today - timedelta(days=1)).strftime('%Y-%m-%d')

    logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {yesterday}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        payments = await get_payments_by_date(yesterday, yesterday)
        registrations = await get_registrations_by_date(yesterday, yesterday)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not payments and not registrations:
            text = escape_md(f"üö´ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ {yesterday} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        bot, admin_id, text, parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã Excel
        payments_filename = f"payments_{yesterday}_{uuid.uuid4().hex[:8]}.xlsx"
        payments_file_path = create_payments_excel(payments, payments_filename, yesterday, yesterday)

        registrations_filename = f"registrations_{yesterday}_{uuid.uuid4().hex[:8]}.xlsx"
        registrations_file_path = create_registrations_excel(registrations, registrations_filename, yesterday, yesterday)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        files_created = []
        if payments_file_path and os.path.exists(payments_file_path):
            files_created.append(('payments', payments_file_path, payments_filename))
        else:
            logger.error(f"–§–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π {payments_file_path} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        if registrations_file_path and os.path.exists(registrations_file_path):
            files_created.append(('registrations', registrations_file_path, registrations_filename))
        else:
            logger.error(f"–§–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π {registrations_file_path} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        if not files_created:
            error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            for admin_id in ADMIN_IDS:
                try:
                    await send_message_with_fallback(
                        bot, admin_id, error_text, parse_mode=ParseMode.MARKDOWN_V2
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_payments = len(payments)
        total_amount = sum(p[2] for p in payments if p[2]) if payments else 0.0
        total_registrations = len(registrations)
        text = (
            f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {yesterday}\n\n"
            f"üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n"
            f"üî¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} RUB\n\n"
            f"üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            f"üî¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_registrations}\n\n"
            f"üìä Excel-—Ñ–∞–π–ª—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        for admin_id in ADMIN_IDS:
            try:
                await send_message_with_fallback(
                    bot, admin_id, escape_md(text), parse_mode=ParseMode.MARKDOWN_V2
                )

                for file_type, file_path, filename in files_created:
                    with open(file_path, 'rb') as f:
                        caption = f"{'–û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º' if file_type == 'payments' else '–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º'} –∑–∞ {yesterday}"
                        await bot.send_document(
                            chat_id=admin_id, document=f, filename=filename, caption=caption
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for _, file_path, _ in files_created:
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_remove:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e_remove}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {yesterday}: {e}", exc_info=True)
        error_text = escape_md("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        for admin_id in ADMIN_IDS:
            try:
                await send_message_with_fallback(
                    bot, admin_id, error_text, parse_mode=ParseMode.MARKDOWN_V2
                )
            except Exception as e_admin:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e_admin}")

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 1) -> None:
    user_id = update.effective_user.id
    page_size = 5

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        users_data_tuples, total_users = await get_all_users_stats(page=page, page_size=page_size)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–ª–∞—Ç—è—â–∏—Ö/–Ω–µ–ø–ª–∞—Ç—è—â–∏—Ö
        all_users_data, _ = await get_all_users_stats(page=1, page_size=1000000)  # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
        total_photos_left = await get_total_remaining_photos()

        # –ü–æ–¥—Å—á–µ—Ç –ø–ª–∞—Ç—è—â–∏—Ö –∏ –Ω–µ–ø–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        paying_users = sum(1 for user_data in all_users_data if len(user_data) >= 11 and user_data[10] > 0)
        non_paying_users = total_users - paying_users
        paying_percent = (paying_users / total_users * 100) if total_users > 0 else 0
        non_paying_percent = (non_paying_users / total_users * 100) if total_users > 0 else 0

        stats_text = (
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
            f"üí≥ –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{paying_users}` ({paying_percent:.2f}%)\n"
            f"üÜì –ù–µ–ø–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{non_paying_users}` ({non_paying_percent:.2f}%)\n"
            f"üì∏ –°—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ñ–æ—Ç–æ —É –≤—Å–µ—Ö: `{total_photos_left}`\n\n"
        )

        max_pages = (total_users + page_size - 1) // page_size or 1

        stats_text += f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_pages}):\n"
        keyboard_buttons = []

        if not users_data_tuples:
            stats_text += "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ._\n"
        else:
            for u_data_tuple in users_data_tuples:
                if len(u_data_tuple) < 12:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {u_data_tuple}")
                    continue

                u_id, u_name, f_name, g_left, a_left, f_purchase_val, act_avatar, email_val, ref_id_val, refs_made, pays_count, spent_total = u_data_tuple

                name_display = f_name or u_name or f"ID {u_id}"
                username_display = f"@{u_name}" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""

                stats_text += f"\n{'‚îÄ' * 30}\n"
                stats_text += f"üë§ {name_display}"
                if username_display:
                    stats_text += f" {username_display}"
                stats_text += f"\nüÜî ID: `{u_id}`\n"
                stats_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {g_left} —Ñ–æ—Ç–æ, {a_left} –∞–≤–∞—Ç–∞—Ä{'–æ–≤' if a_left != 1 else ''}\n"

                if pays_count and pays_count > 0:
                    spent_display = f"{spent_total:.2f}" if spent_total is not None else "0.00"
                    stats_text += f"üí≥ –ü–æ–∫—É–ø–æ–∫: {pays_count}, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent_display} RUB\n"
                else:
                    stats_text += f"üí≥ –ü–æ–∫—É–ø–æ–∫: –Ω–µ—Ç\n"

                if ref_id_val:
                    stats_text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω: ID {ref_id_val}\n"
                if refs_made and refs_made > 0:
                    stats_text += f"üéØ –ü—Ä–∏–≤–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_made}\n"

                stats_text += f"üìß Email: {email_val or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"

                if act_avatar:
                    stats_text += f"üåü –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä ID: {act_avatar}\n"

                button_name = truncate_text(name_display, 20)
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        f"üë§ {button_name} (ID: {u_id})",
                        callback_data=f"user_actions_{u_id}"
                    )
                ])

        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_stats_page_{page-1}"))
        if page * page_size < total_users:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"admin_stats_page_{page+1}"))

        if nav_buttons:
            keyboard_buttons.append(nav_buttons)

        keyboard_buttons.extend([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])

        reply_markup_stats = InlineKeyboardMarkup(keyboard_buttons)

        await send_message_with_fallback(
            context.bot, user_id, stats_text, update_or_query=update,
            reply_markup=reply_markup_stats, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_user_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    user_id = update.effective_user.id

    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    gen_stats = await get_user_generation_stats(target_user_id)
    payments = await get_user_payments(target_user_id)
    avatars = await get_user_trainedmodels(target_user_id)

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _ = target_user_info
    display_name_raw = f_name or u_name or f"ID {target_user_id}"
    username_display_raw = u_name if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    username_display = f" (@{escape_md(username_display_raw)})" if username_display_raw else ""
    email_display_raw = email_val if email_val else "–ù–µ —É–∫–∞–∑–∞–Ω"

    text = f"üë§ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
    text += f"–ò–º—è: {display_name_raw}{username_display}\n"
    text += f"ID: `{target_user_id}`\n"
    text += f"Email: {email_display_raw}\n"
    text += f"\nüí∞ –ë–∞–ª–∞–Ω—Å:\n"
    text += f"  ‚Ä¢ –§–æ—Ç–æ: `{g_left}`\n"
    text += f"  ‚Ä¢ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n"

    if gen_stats:
        text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"
        for gen_type, count in gen_stats.items():
            type_name = {
                'with_avatar': '–§–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
                'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
                'ai_video': 'AI-–≤–∏–¥–µ–æ (1.6)',
                'ai_video_v2': 'AI-–≤–∏–¥–µ–æ (2.0)',
                'train_flux': '–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤',
                'prompt_assist': '–ü–æ–º–æ—â—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏'
            }.get(gen_type, gen_type)
            text += f"  ‚Ä¢ {(type_name)}: `{count}`\n"

    if avatars:
        text += f"\nüé≠ –ê–≤–∞—Ç–∞—Ä—ã ({len(avatars)}):\n"
        for avatar_tuple in avatars[:3]:
            if len(avatar_tuple) >= 9:
                avatar_id, _, _, status, _, _, _, _, avatar_name = avatar_tuple[:9]
                name_raw = avatar_name or f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"
                status_icon = "‚úÖ" if status == "success" else "‚è≥" if status in ["pending", "starting", "processing"] else "‚ùå"
                text += f"  ‚Ä¢ {escape_md(name_raw)}: {status_icon} {escape_md(status)}\n"
        if len(avatars) > 3:
            text += f"  _...–∏ –µ—â–µ {len(avatars) - 3}_\n"

    if payments:
        total_spent = sum(p[2] for p in payments if p[2] is not None)
        text += f"\nüí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ({len(payments)}):\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: `{total_spent:.2f}` RUB\n"
        for _, plan, amount, p_date in payments[:3]:
            date_str = datetime.strptime(str(p_date).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if p_date else "N/A"
            plan_raw = plan.capitalize() if plan else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω"
            amount_display = f"{amount:.2f}" if amount is not None else "0.00"
            text += f"  ‚Ä¢ `{date_str}`: {escape_md(plan_raw)} - `{amount_display}` RUB\n"

    text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    is_blocked = await is_user_blocked(target_user_id)
    keyboard_buttons = await create_admin_user_actions_keyboard(target_user_id, is_blocked)

    admin_view_source = context.user_data.get('admin_view_source', 'admin_stats')
    back_button_text = "üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    back_button_callback = "admin_panel"

    if admin_view_source == 'admin_stats':
        back_button_text = "üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        back_button_callback = "admin_stats"
    elif admin_view_source == 'admin_search_user':
        back_button_text = "üîô –ö –ø–æ–∏—Å–∫—É"
        back_button_callback = "admin_search_user"

    keyboard_buttons.append([InlineKeyboardButton(back_button_text, callback_data=back_button_callback)])

    reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_user_profile_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = update.effective_user.id

    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    g_left, a_left, _, u_name, _, f_purchase_val, email_val, act_avatar_id, f_name, _ = target_user_info

    name_display_raw = f_name or u_name or f"ID {target_user_id}"
    username_display_raw = u_name if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
    username_display = f" (@{escape_md(username_display_raw)})" if username_display_raw else ""
    email_display_raw = email_val if email_val else "–ù–µ —É–∫–∞–∑–∞–Ω"

    active_avatar_name_raw = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    if act_avatar_id:
        active_model_data = await get_active_trainedmodel(target_user_id)
        if active_model_data and active_model_data[3] == 'success':
            avatar_name_db = active_model_data[8]
            active_avatar_name_raw = avatar_name_db if avatar_name_db else f"–ê–≤–∞—Ç–∞—Ä {act_avatar_id}"

    avg_rating, rating_count, registration_date = await get_user_rating_and_registration(target_user_id)
    rating_text = f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ({rating_count} –æ—Ü–µ–Ω–æ–∫)" if avg_rating is not None and rating_count > 0 else "‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    registration_text = f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}" if registration_date else "üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ —É–∫–∞–∑–∞–Ω–∞"

    payments = await get_user_payments(target_user_id)
    payments_history = "\n_–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫._"

    if payments:
        payments_history = "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n"
        for _, plan, amount, p_date in payments[:3]:
            p_date_formatted = datetime.strptime(str(p_date).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M') if p_date else "N/A"
            p_amount_formatted = f"{amount:.2f} RUB" if amount is not None else "N/A"
            plan_raw = plan.capitalize() if plan else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω"
            payments_history += f"  ‚Ä¢ {escape_md(plan_raw)} ({p_amount_formatted}) - {p_date_formatted}\n"

    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name_display_raw}{username_display} (ID: `{target_user_id}`)\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å:\n  üì∏ –§–æ—Ç–æ: `{g_left}`\n  üë§ –ê–≤–∞—Ç–∞—Ä—ã: `{a_left}`\n\n"
        f"üåü –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: {escape_md(active_avatar_name_raw)}\n"
        f"üìß Email: {(email_display_raw)}\n"
        f"{rating_text}\n"
        f"{registration_text}\n"
        f"üõí –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {'–ù–µ—Ç' if f_purchase_val == 0 else '–î–∞'}\n"
        f"{payments_history}"
    )

    await send_message_with_fallback(
        context.bot, user_id, profile_text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"user_actions_{target_user_id}")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_user_avatars_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_id = update.effective_user.id
    
    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    name_display_raw = target_user_info[8] or target_user_info[3] or f"ID {target_user_id}"
    
    avatars_text = f"üñºÔ∏è –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {(name_display_raw)} (ID: `{target_user_id}`)\n\n"
    
    user_avatars_full = await get_user_trainedmodels(target_user_id)
    if not user_avatars_full:
        avatars_text += "_–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤._"
    else:
        for avatar_tuple in user_avatars_full:
            if len(avatar_tuple) < 9:
                continue
                
            avatar_id, model_id, model_version, status, prediction_id, trigger_word, _, _, avatar_name = avatar_tuple[:9]
            
            avatar_name_raw = avatar_name if avatar_name else f"–ê–≤–∞—Ç–∞—Ä {avatar_id}"
            status_raw = status if status else "N/A"
            icon = "‚úÖ" if status == "success" else "‚è≥" if status in ["pending", "starting", "processing"] else "‚ùå"
            
            avatars_text += f"{escape_md(avatar_name_raw)} (ID: {avatar_id})\n"
            avatars_text += f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {icon} {escape_md(status_raw)}\n"
            avatars_text += f"  ‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä: `{escape_md(trigger_word)}`\n"
            if model_id:
                avatars_text += f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: `{(model_id)}`\n"
            if model_version:
                avatars_text += f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: `{escape_md(model_version)}`\n"
            if prediction_id:
                avatars_text += f"  ‚Ä¢ Training ID: `{escape_md(prediction_id)}`\n"
            avatars_text += "\n"
    
    await send_message_with_fallback(
        context.bot, user_id, avatars_text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"user_actions_{target_user_id}")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def show_replicate_costs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ Replicate."""
    user_id = update.effective_user.id
    
    try:
        log_entries_all_time = await get_generation_log_for_cost()
        thirty_days_ago_dt = datetime.now() - timedelta(days=30)
        thirty_days_ago_str = thirty_days_ago_dt.strftime('%Y-%m-%d %H:%M:%S')
        log_entries_30_days = await get_generation_log_for_cost(start_date_str=thirty_days_ago_str)
        
        total_cost_all_time = Decimal(0)
        costs_by_model_all_time = {}
        for entry in log_entries_all_time:
            model_id_entry, _, cost, _ = entry
            cost_decimal = Decimal(str(cost)) if cost is not None else Decimal(0)
            total_cost_all_time += cost_decimal
            key_for_dict = model_id_entry if model_id_entry else "unknown_model_id"
            costs_by_model_all_time[key_for_dict] = costs_by_model_all_time.get(key_for_dict, Decimal(0)) + cost_decimal
        
        total_cost_30_days = Decimal(0)
        costs_by_model_30_days = {}
        for entry in log_entries_30_days:
            model_id_entry, _, cost, _ = entry
            cost_decimal = Decimal(str(cost)) if cost is not None else Decimal(0)
            total_cost_30_days += cost_decimal
            key_for_dict = model_id_entry if model_id_entry else "unknown_model_id"
            costs_by_model_30_days[key_for_dict] = costs_by_model_30_days.get(key_for_dict, Decimal(0)) + cost_decimal

        text = "üí∞ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ Replicate (USD):\n\n"
        text += f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n  –û–±—â–∞—è —Å—É–º–º–∞: `${total_cost_all_time:.4f}`\n"
        
        if costs_by_model_all_time:
            text += "  –ü–æ –º–æ–¥–µ–ª—è–º:\n"
            for model_id_from_log, cost_val in costs_by_model_all_time.items():
                model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                if model_id_from_log and model_id_from_log != "unknown_model_id":
                    model_name = next(
                        (m_data.get('name', model_id_from_log)
                         for _, m_data in IMAGE_GENERATION_MODELS.items()
                         if m_data.get('id') == model_id_from_log),
                        model_id_from_log
                    )
                elif model_id_from_log == "unknown_model_id":
                    model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥)"
                
                text += f"    ‚Ä¢ {escape_md(model_name)}: `${cost_val:.4f}`\n"
        
        text += "\n"
        text += f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n  –û–±—â–∞—è —Å—É–º–º–∞: `${total_cost_30_days:.4f}`\n"
        
        if costs_by_model_30_days:
            text += "  –ü–æ –º–æ–¥–µ–ª—è–º:\n"
            for model_id_from_log, cost_val in costs_by_model_30_days.items():
                model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                if model_id_from_log and model_id_from_log != "unknown_model_id":
                    model_name = next(
                        (m_data.get('name', model_id_from_log)
                         for _, m_data in IMAGE_GENERATION_MODELS.items()
                         if m_data.get('id') == model_id_from_log),
                        model_id_from_log
                    )
                elif model_id_from_log == "unknown_model_id":
                    model_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å (ID –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥)"
                
                text += f"    ‚Ä¢ {escape_md(model_name)}: `${cost_val:.4f}`\n"
        
        text += "\n_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏._"
        
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ Replicate: {e}", exc_info=True)
        error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –°–º. –ª–æ–≥–∏."
        admin_kb = await create_admin_keyboard()
        await send_message_with_fallback(
            context.bot, user_id, error_text, update_or_query=update,
            reply_markup=admin_kb, parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_activity_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    context.user_data['awaiting_activity_dates'] = True
    text = escape_md(
        "üìä –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`YYYY-MM-DD YYYY-MM-DD` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-05-01 2025-05-26`)\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:"
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="activity_7_days")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="activity_30_days")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_activity_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, start_date: str, end_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    user_id = update.effective_user.id
    try:
        stats = await get_user_activity_stats(start_date, end_date)
        if not stats:
            text = escape_md(f"üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_activity_stats")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        text = f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({start_date} - {end_date})\n\n"
        for stat in stats[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_id_stat, username, messages, photos, videos, purchases = stat
            username_display = f"@{username}" if username else f"ID {user_id_stat}"
            text += (
                f"üë§ {username_display} (ID: `{user_id_stat}`)\n"
                f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: `{messages}`\n"
                f"  ‚Ä¢ –§–æ—Ç–æ: `{photos}`\n"
                f"  ‚Ä¢ –í–∏–¥–µ–æ: `{videos}`\n"
                f"  ‚Ä¢ –ü–æ–∫—É–ø–æ–∫: `{purchases}`\n\n"
            )

        if len(stats) > 10:
            text += f"_...–∏ –µ—â–µ {len(stats) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π._"

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="admin_activity_stats")],
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_referral_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        stats = await get_referral_stats()
        total_referrals = stats.get('total_referrals', 0)
        paid_referrals = stats.get('paid_referrals', 0)
        conversion_rate = (paid_referrals / total_referrals * 100) if total_referrals > 0 else 0
        top_referrers = stats.get('top_referrers', [])[:5]

        text = (
            f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: `{total_referrals}`\n"
            f"üí∏ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: `{paid_referrals}` ({conversion_rate:.2f}%)\n"
        )

        if top_referrers:
            text += "\nüèÜ –¢–æ–ø-5 –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏—Ö:\n"
            for referrer in top_referrers:
                user_id_ref, username, referral_count = referrer
                username_display = f"@{username}" if username else f"ID {user_id_ref}"
                text += f"  ‚Ä¢ {(username_display)}: `{referral_count}` —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_visualization(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text = escape_md(
        "üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:"
    )
    keyboard = [
        [InlineKeyboardButton("üìà –ü–ª–∞—Ç–µ–∂–∏", callback_data="visualize_payments")],
        [InlineKeyboardButton("üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="visualize_registrations")],
        [InlineKeyboardButton("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="visualize_generations")],
        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )

async def visualize_payments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        msk_tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.now(msk_tz).date()
        start_date = end_date - timedelta(days=30)
        payments = await get_payments_by_date(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
        if payments:
            logger.debug(f"–ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payments[0]}")

        dates = []
        amounts = []
        current_date = start_date
        while current_date <= end_date:
            dates.append(current_date)
            amounts.append(0.0)
            current_date += timedelta(days=1)

        for payment in payments:
            if payment[4] is None:
                logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment[3]} –∏–º–µ–µ—Ç –ø—É—Å—Ç—É—é –¥–∞—Ç—É created_at")
                continue
            try:
                payment_date = payment[4]
                if payment_date.tzinfo:
                    payment_date = payment_date.astimezone(msk_tz).date()
                else:
                    payment_date = payment_date.date()
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment[3]}: –¥–∞—Ç–∞={payment_date}, —Å—É–º–º–∞={payment[2]}")
                if start_date <= payment_date <= end_date:
                    payment_datetime = datetime(payment_date.year, payment_date.month, payment_date.day)
                    if payment_datetime.date() in dates:
                        index = dates.index(payment_datetime.date())
                        amounts[index] += float(payment[2]) if payment[2] is not None else 0.0
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂: –¥–∞—Ç–∞={payment_date}, —Å—É–º–º–∞={payment[2] if payment[2] is not None else 0.0}, –∏–Ω–¥–µ–∫—Å={index}")
                    else:
                        logger.warning(f"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ dates")
                else:
                    logger.debug(f"–ü–ª–∞—Ç–µ–∂ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –¥–∞—Ç–∞={payment_date}")
            except (ValueError, AttributeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ {payment[3]}: {e}")

        if not any(amounts):
            text = escape_md("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        plt.plot(dates, amounts, color='#4CAF50', linewidth=2, marker='o')
        plt.fill_between(dates, amounts, color=(76/255, 175/255, 80/255, 0.2))
        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–°—É–º–º–∞ (RUB)", fontsize=12)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

        await context.bot.send_photo(
            chat_id=user_id,
            photo=buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π"
        )

        buffer.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def change_balance_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> int:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data['awaiting_balance_change'] = True
    context.user_data['target_user_id'] = target_user_id
    text = escape_md(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ID `{target_user_id}`:\n"
        "–ü—Ä–∏–º–µ—Ä: `+10 —Ñ–æ—Ç–æ` –∏–ª–∏ `-3 –∞–≤–∞—Ç–∞—Ä–∞`"
    )
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]])
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BALANCE_CHANGE

async def handle_balance_change_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_balance_change'):
        return ConversationHandler.END

    target_user_id = context.user_data.pop('target_user_id', None)
    context.user_data.pop('awaiting_balance_change', None)
    if not target_user_id:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    input_text = update.message.text.strip()
    try:
        operation = 'add' if input_text.startswith('+') else 'subtract'
        amount = int(input_text[1:].split()[0])
        resource = input_text.split()[1].lower()
        if resource not in ['—Ñ–æ—Ç–æ', '–∞–≤–∞—Ç–∞—Ä–∞', '–∞–≤–∞—Ç–∞—Ä']:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞")

        photos = amount if resource == '—Ñ–æ—Ç–æ' else 0
        avatars = amount if resource in ['–∞–≤–∞—Ç–∞—Ä–∞', '–∞–≤–∞—Ç–∞—Ä'] else 0

        success = await update_user_balance(target_user_id, photos, avatars, operation)
        user_info = await check_subscription(target_user_id)
        if success and user_info:
            text = escape_md(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å ID `{target_user_id}` –∏–∑–º–µ–Ω–µ–Ω: {input_text}\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{user_info[0]}` —Ñ–æ—Ç–æ, `{user_info[1]}` –∞–≤–∞—Ç–∞—Ä–æ–≤"
            )
        else:
            text = escape_md(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ID `{target_user_id}`")
    except Exception as e:
        text = escape_md(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü—Ä–∏–º–µ—Ä: `+10 —Ñ–æ—Ç–æ`")

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]])
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    return ConversationHandler.END

async def show_user_logs(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        logs = await get_user_logs(target_user_id, limit=50)
        if not logs:
            text = f"üìú –õ–æ–≥–∏ –¥–ª—è ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        text = f"üìú –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n"
        for log in logs:
            timestamp, action_type, details = log
            timestamp_str = datetime.strptime(str(timestamp).split('.')[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            text += f"‚Ä¢ `{timestamp_str}`: {(action_type)} - {(truncate_text(str(details), 50))}\n"

        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –¥–ª—è ID {target_user_id}: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def initiate_filtered_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data.pop('broadcast_filters', None)
    context.user_data.pop('broadcast_message', None)
    context.user_data.pop('broadcast_media', None)
    context.user_data.pop('awaiting_broadcast_message', None)
    context.user_data.pop('awaiting_broadcast_media_confirm', None)

    context.user_data['awaiting_broadcast_filters'] = True
    text = escape_md(
        "üéØ –£–∫–∞–∂–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "min_photos=X max_photos=Y min_avatars=Z active_days=N min_generations=M\n"
        "–ü—Ä–∏–º–µ—Ä: `min_photos=0 max_photos=10 min_avatars=1 active_days=7 min_generations=5`\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
    )
    keyboard = [
        [InlineKeyboardButton("–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="broadcast_no_filters")],
        [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BROADCAST_FILTERS

async def handle_broadcast_filters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_broadcast_filters'):
        logger.warning(f"handle_broadcast_filters –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_filters –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_filters', None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"
    if update.callback_query:
        await update.callback_query.answer()
        text = ""
    else:
        text = update.message.text.strip() if update.message and update.message.text else ""

    filters_dict = {
        'min_photos': None,
        'max_photos': None,
        'min_avatars': None,
        'active_days': None,
        'min_generations': None
    }

    if text:
        try:
            for part in text.split():
                key, value = part.split('=')
                if key in filters_dict:
                    filters_dict[key] = int(value)
        except (ValueError, KeyError) as e:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
            text = escape_md(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`min_photos=X max_photos=Y min_avatars=Z active_days=N min_generations=M`\n"
                "–ü—Ä–∏–º–µ—Ä: `min_photos=0 max_photos=10 min_avatars=1 active_days=7 min_generations=5`"
            )
            keyboard = [
                [InlineKeyboardButton("–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="broadcast_no_filters")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
            )
            return AWAITING_BROADCAST_FILTERS

    context.user_data['broadcast_filters'] = filters_dict
    context.user_data['awaiting_broadcast_message'] = True

    text = escape_md(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown V2.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
    )
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BROADCAST_MESSAGE

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_broadcast_message'):
        logger.warning(f"handle_broadcast_message –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_message –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_message', None)
    message_text = update.message.text.strip() if update.message and update.message.text else ""

    if not message_text:
        logger.warning(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}")
        text = escape_md("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        context.user_data['awaiting_broadcast_message'] = True
        return AWAITING_BROADCAST_MESSAGE

    context.user_data['broadcast_message'] = message_text
    context.user_data['awaiting_broadcast_media_confirm'] = True

    text = escape_md(
        "üì∏ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –º–µ–¥–∏–∞'."
    )
    keyboard = [
        [InlineKeyboardButton("–ë–µ–∑ –º–µ–¥–∏–∞", callback_data="broadcast_no_media")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BROADCAST_MEDIA_CONFIRM

async def handle_broadcast_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_broadcast_media_confirm'):
        logger.warning(f"handle_broadcast_media –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_media_confirm –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_media_confirm', None)
    media = None
    media_type = None

    if update.message:
        if update.message.photo:
            media = update.message.photo[-1].file_id
            media_type = 'photo'
        elif update.message.video:
            media = update.message.video.file_id
            media_type = 'video'
    elif update.callback_query and update.callback_query.data == "broadcast_no_media":
        await update.callback_query.answer()
        media = None
        media_type = None

    if media:
        context.user_data['broadcast_media'] = {'file_id': media, 'type': media_type}
    else:
        context.user_data.pop('broadcast_media', None)

    filters_dict = context.user_data.get('broadcast_filters', {})
    message_text = context.user_data.get('broadcast_message', '')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    users = await get_paid_users() if filters_dict.get('min_photos', 0) > 0 else await get_non_paid_users()
    target_users = [user[0] for user in users]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user[0] - user_id

    text = escape_md(
        f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n"
        f"üì∏ –ú–µ–¥–∏–∞: {'–ï—Å—Ç—å' if media else '–ù–µ—Ç'}\n"
        f"‚è∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?"
    )
    keyboard = [
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="broadcast_send_now")],
        [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="broadcast_schedule")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BROADCAST_SCHEDULE

async def handle_broadcast_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "broadcast_send_now":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É
        filters_dict = context.user_data.get('broadcast_filters', {})
        message_text = context.user_data.get('broadcast_message', '')
        media = context.user_data.get('broadcast_media', None)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        users = await get_paid_users() if filters_dict.get('min_photos', 0) > 0 else await get_non_paid_users()
        target_users = [user[0] for user in users]

        success_count = 0
        error_count = 0
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await query.edit_message_text(
            escape_md("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞..."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        for target_user_id in target_users:
            try:
                if media:
                    if media['type'] == 'photo':
                        await context.bot.send_photo(
                            chat_id=target_user_id,
                            photo=media['file_id'],
                            caption=message_text,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                    elif media['type'] == 'video':
                        await context.bot.send_video(
                            chat_id=target_user_id,
                            video=media['file_id'],
                            caption=message_text,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                else:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=message_text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if success_count % 20 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                error_count += 1

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        text = escape_md(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(target_users)}"
        )
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('broadcast_filters', None)
        context.user_data.pop('broadcast_message', None)
        context.user_data.pop('broadcast_media', None)
        return ConversationHandler.END

    elif query.data == "broadcast_schedule":
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
        context.user_data['awaiting_broadcast_schedule'] = True
        
        text = escape_md(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "üìÖ –§–æ—Ä–º–∞—Ç: `YYYY-MM-DD HH:MM`\n"
            "–ü—Ä–∏–º–µ—Ä: `2025-06-15 14:30`\n\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (MSK)."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        return AWAITING_BROADCAST_SCHEDULE
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data –≤ handle_broadcast_schedule: {query.data}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

async def handle_broadcast_schedule_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    
    if not context.user_data.get('awaiting_broadcast_schedule'):
        logger.warning(f"handle_broadcast_schedule_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_schedule –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_schedule', None)
    text = update.message.text.strip()

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        schedule_time = datetime.strptime(text, '%Y-%m-%d %H:%M')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if schedule_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        filters_dict = context.user_data.get('broadcast_filters', {})
        message_text = context.user_data.get('broadcast_message', '')
        media = context.user_data.get('broadcast_media', None)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py)
        await schedule_broadcast(schedule_time, message_text, media, filters_dict)
        
        text = escape_md(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {text}!\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏."
        )
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('broadcast_filters', None)
        context.user_data.pop('broadcast_message', None)
        context.user_data.pop('broadcast_media', None)
        
        return ConversationHandler.END

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
        
        text = escape_md(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {str(e)}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `YYYY-MM-DD HH:MM`\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `2025-06-14 14:30`"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), 
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        context.user_data['awaiting_broadcast_schedule'] = True
        return AWAITING_BROADCAST_SCHEDULE

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    logger.debug(f"–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è user_id={user_id}")

    context.user_data.pop('awaiting_broadcast_filters', None)
    context.user_data.pop('awaiting_broadcast_message', None)
    context.user_data.pop('awaiting_broadcast_media_confirm', None)
    context.user_data.pop('awaiting_broadcast_schedule', None)
    context.user_data.pop('broadcast_filters', None)
    context.user_data.pop('broadcast_message', None)
    context.user_data.pop('broadcast_media', None)

    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."),
        update_or_query=update,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
    return ConversationHandler.END

# ===================== CONVERSATION HANDLER –î–õ–Ø –†–ê–°–°–´–õ–ö–ò =====================

broadcast_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(initiate_filtered_broadcast, pattern="^admin_broadcast$")
    ],
    states={
        AWAITING_BROADCAST_FILTERS: [
            CallbackQueryHandler(handle_broadcast_filters, pattern="^broadcast_no_filters$"),
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
                handle_broadcast_filters
            )
        ],
        AWAITING_BROADCAST_MESSAGE: [
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
                handle_broadcast_message
            )
        ],
        AWAITING_BROADCAST_MEDIA_CONFIRM: [
            MessageHandler(
                filters.PHOTO | filters.VIDEO & filters.User(user_id=ADMIN_IDS),
                handle_broadcast_media
            ),
            CallbackQueryHandler(handle_broadcast_media, pattern="^broadcast_no_media$")
        ],
        AWAITING_BROADCAST_SCHEDULE: [
            CallbackQueryHandler(handle_broadcast_schedule, pattern="^broadcast_send_now$|^broadcast_schedule$"),
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
                handle_broadcast_schedule_input
            )
        ]
    },
    fallbacks=[
        CommandHandler("cancel", cancel_broadcast),
        CallbackQueryHandler(cancel_broadcast, pattern="^admin_panel$")
    ],
    per_user=True,
    per_chat=True,
    per_message=False
)
async def handle_admin_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ handle_admin_text_input: user_id={user_id}")
        return ConversationHandler.END

    text = update.message.text.strip()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ user_id={user_id}: {text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if context.user_data.get('awaiting_block_reason'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_block_reason_input –¥–ª—è user_id={user_id}")
        return await handle_block_reason_input(update, context)
    
    if context.user_data.get('awaiting_broadcast_filters'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_broadcast_filters –¥–ª—è user_id={user_id}")
        return await handle_broadcast_filters(update, context)
    
    if context.user_data.get('awaiting_broadcast_message'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_broadcast_message –¥–ª—è user_id={user_id}")
        return await handle_broadcast_message(update, context)
    
    if context.user_data.get('awaiting_broadcast_schedule'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_broadcast_schedule_input –¥–ª—è user_id={user_id}")
        return await handle_broadcast_schedule_input(update, context)
    
    if context.user_data.get('awaiting_payments_date'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_payments_date_input –¥–ª—è user_id={user_id}")
        return await handle_payments_date_input(update, context)
    
    if context.user_data.get('awaiting_user_search'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_user_search –¥–ª—è user_id={user_id}")
        return await handle_user_search(update, context)
    
    if context.user_data.get('awaiting_balance_change'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_balance_change_input –¥–ª—è user_id={user_id}")
        return await handle_balance_change_input(update, context)
    
    if context.user_data.get('awaiting_activity_dates'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_activity_dates_input –¥–ª—è user_id={user_id}")
        return await handle_activity_dates_input(update, context)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    logger.warning(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: {text}")
    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."),
        update_or_query=update,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return ConversationHandler.END

admin_text_handler = MessageHandler(
    filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
    handle_admin_text_input
)

# –ü–û–°–õ–ï admin_text_handler –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é:
async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback
    if data == "admin_panel":
        await admin_panel(update, context)
    elif data == "admin_stats":
        await show_admin_stats(update, context)
    elif data.startswith("admin_stats_page_"):
        page = int(data.split("_")[-1])
        await show_admin_stats(update, context, page)
    elif data == "admin_replicate_costs":
        await show_replicate_costs(update, context)
    elif data == "admin_activity_stats":
        await show_activity_stats(update, context)
    elif data == "admin_referral_stats":
        await show_referral_stats(update, context)
    elif data == "admin_visualization":
        await show_visualization(update, context)
    elif data == "visualize_payments":
        await visualize_payments(update, context)
    elif data == "visualize_registrations":
        await visualize_registrations(update, context)
    elif data == "visualize_generations":
        await visualize_generations(update, context)
    elif data == "admin_payments":
        await show_payments_menu(update, context)
    elif data == "admin_search_user":
        await search_users_admin(update, context)
    elif data == "admin_failed_avatars":
        await admin_show_failed_avatars(update, context)
    elif data == "admin_delete_all_failed":
        await admin_confirm_delete_all_failed(update, context)
    elif data == "admin_confirm_delete_all":
        await admin_execute_delete_all_failed(update, context)
    elif data.startswith("activity_"):
        if data == "activity_7_days":
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            await handle_activity_stats(update, context, start_date, end_date)
        elif data == "activity_30_days":
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            await handle_activity_stats(update, context, start_date, end_date)
    elif data.startswith("payments_date_"):
        parts = data.split("_")
        if len(parts) >= 4:
            start_date = parts[2]
            end_date = parts[3]
            await handle_payments_date(update, context, start_date, end_date)
    elif data == "payments_manual_date":
        await handle_manual_date_input(update, context)
    elif data.startswith("user_actions_"):
        target_user_id = int(data.split("_")[-1])
        await show_user_actions(update, context, target_user_id)
    elif data.startswith("user_profile_"):
        target_user_id = int(data.split("_")[-1])
        await show_user_profile_admin(update, context, target_user_id)
    elif data.startswith("user_avatars_"):
        target_user_id = int(data.split("_")[-1])
        await show_user_avatars_admin(update, context, target_user_id)
    elif data.startswith("change_balance_"):
        target_user_id = int(data.split("_")[-1])
        await change_balance_admin(update, context, target_user_id)
    elif data.startswith("user_logs_"):
        target_user_id = int(data.split("_")[-1])
        await show_user_logs(update, context, target_user_id)
    elif data.startswith("admin_generate:"):
        target_user_id = int(data.split(":")[1])
        await generate_photo_for_user(update, context, target_user_id)
    elif data.startswith("admin_video:"):
        target_user_id = int(data.split(":")[1])
        await generate_video_for_user(update, context, target_user_id)
    elif data.startswith("delete_user_"):
        target_user_id = int(data.split("_")[-1])
        await delete_user_admin(update, context, target_user_id)
    elif data.startswith("confirm_delete_user_"):
        target_user_id = int(data.split("_")[-1])
        await confirm_delete_user(update, context, target_user_id)
    elif data.startswith("block_user_"):
        target_user_id = int(data.split("_")[-1])
        await block_user_admin(update, context, target_user_id, block=True)
    elif data.startswith("unblock_user_"):
        target_user_id = int(data.split("_")[-1])
        await block_user_admin(update, context, target_user_id, block=False)
    elif data.startswith("confirm_block_user_"):
        parts = data.split("_")
        target_user_id = int(parts[3])
        action = parts[4]
        if action == "block":
            await confirm_block_user(update, context, target_user_id, block=True, block_reason="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")
        elif action == "unblock":
            await confirm_block_user(update, context, target_user_id, block=False)
    elif data.startswith("reset_avatars_"):
        target_user_id = int(data.split("_")[-1])
        await confirm_reset_avatar(update, context, target_user_id)

async def handle_broadcast_schedule_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    
    if not context.user_data.get('awaiting_broadcast_schedule'):
        logger.warning(f"handle_broadcast_schedule_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_schedule –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_schedule', None)
    text = update.message.text.strip()

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        schedule_time = datetime.strptime(text, '%Y-%m-%d %H:%M')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if schedule_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        filters_dict = context.user_data.get('broadcast_filters', {})
        message_text = context.user_data.get('broadcast_message', '')
        media = context.user_data.get('broadcast_media', None)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        await schedule_broadcast(schedule_time, message_text, media, filters_dict)
        
        text = escape_md(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {text}!\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏."
        )
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('broadcast_filters', None)
        context.user_data.pop('broadcast_message', None)
        context.user_data.pop('broadcast_media', None)
        
        return ConversationHandler.END

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
        
        text = escape_md(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {str(e)}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `YYYY-MM-DD HH:MM`\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: `2025-06-14 14:30`"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), 
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        context.user_data['awaiting_broadcast_schedule'] = True
        return AWAITING_BROADCAST_SCHEDULE


# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é schedule_broadcast, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç:
async def schedule_broadcast(schedule_time: datetime, message_text: str, media: Optional[Dict], filters_dict: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        broadcast_data = {
            'message': message_text,
            'media': media,
            'filters': filters_dict,
            'created_at': datetime.now().isoformat()
        }
        
        async with aiosqlite.connect('users.db') as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS scheduled_broadcasts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    scheduled_time TEXT NOT NULL,
                    broadcast_data TEXT NOT NULL,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            await conn.execute(
                """
                INSERT INTO scheduled_broadcasts (scheduled_time, broadcast_data, status)
                VALUES (?, ?, 'pending')
                """,
                (schedule_time.isoformat(), json.dumps(broadcast_data, ensure_ascii=False))
            )
            await conn.commit()
            
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        raise
async def handle_broadcast_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "broadcast_send_now":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É
        filters_dict = context.user_data.get('broadcast_filters', {})
        message_text = context.user_data.get('broadcast_message', '')
        media = context.user_data.get('broadcast_media', None)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        users = await get_paid_users() if filters_dict.get('min_photos', 0) > 0 else await get_non_paid_users()
        target_users = [user[0] for user in users]

        success_count = 0
        error_count = 0
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await query.edit_message_text(
            escape_md("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞..."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        for target_user_id in target_users:
            try:
                if media:
                    if media['type'] == 'photo':
                        await context.bot.send_photo(
                            chat_id=target_user_id,
                            photo=media['file_id'],
                            caption=message_text,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                    elif media['type'] == 'video':
                        await context.bot.send_video(
                            chat_id=target_user_id,
                            video=media['file_id'],
                            caption=message_text,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                else:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=message_text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if success_count % 20 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                error_count += 1

        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        text = escape_md(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(target_users)}"
        )
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('broadcast_filters', None)
        context.user_data.pop('broadcast_message', None)
        context.user_data.pop('broadcast_media', None)
        return ConversationHandler.END

    elif query.data == "broadcast_schedule":
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
        context.user_data['awaiting_broadcast_schedule'] = True
        
        text = escape_md(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "üìÖ –§–æ—Ä–º–∞—Ç: `YYYY-MM-DD HH:MM`\n"
            "–ü—Ä–∏–º–µ—Ä: `2025-06-15 14:30`\n\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ (MSK)."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        return AWAITING_BROADCAST_SCHEDULE
    
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è callback_data –≤ handle_broadcast_schedule: {query.data}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END
    
    async def get_filtered_users_count(filters_dict: Dict[str, Any]) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    try:
        query = "SELECT COUNT(*) FROM users WHERE 1=1"
        params = []
        
        if filters_dict:
            if 'has_payment' in filters_dict:
                if filters_dict['has_payment']:
                    query += " AND user_id IN (SELECT DISTINCT user_id FROM payments WHERE status = 'completed')"
                else:
                    query += " AND user_id NOT IN (SELECT DISTINCT user_id FROM payments WHERE status = 'completed')"
            
            if 'registration_after' in filters_dict:
                query += " AND registration_date >= ?"
                params.append(filters_dict['registration_after'])
            
            if 'registration_before' in filters_dict:
                query += " AND registration_date <= ?"
                params.append(filters_dict['registration_before'])
            
            if 'min_balance' in filters_dict:
                query += " AND balance >= ?"
                params.append(filters_dict['min_balance'])
            
            if 'max_balance' in filters_dict:
                query += " AND balance <= ?"
                params.append(filters_dict['max_balance'])
            
            if 'is_blocked' in filters_dict:
                query += " AND is_blocked = ?"
                params.append(1 if filters_dict['is_blocked'] else 0)
        
        async with aiosqlite.connect('users.db') as conn:
            cursor = await conn.cursor()
            await cursor.execute(query, params)
            result = await cursor.fetchone()
            return result[0] if result else 0
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0
    
async def handle_broadcast_schedule_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_broadcast_schedule'):
        logger.warning(f"handle_broadcast_schedule_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_broadcast_schedule –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_broadcast_schedule', None)
    text = update.message.text.strip()

    try:
        schedule_time = datetime.strptime(text, '%Y-%m-%d %H:%M')
        if schedule_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")

        filters_dict = context.user_data.get('broadcast_filters', {})
        message_text = context.user_data.get('broadcast_message', '')
        media = context.user_data.get('broadcast_media', None)

        await schedule_broadcast(schedule_time, message_text, media, filters_dict)
        text = escape_md(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {text}!\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏."
        )
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('broadcast_filters', None)
        context.user_data.pop('broadcast_message', None)
        context.user_data.pop('broadcast_media', None)
        return ConversationHandler.END

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
        text = escape_md(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD HH:MM` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-06-14 14:30`)."
        )
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
        ]
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        context.user_data['awaiting_broadcast_schedule'] = True
        return AWAITING_BROADCAST_SCHEDULE        

async def search_users_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."), parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data['awaiting_user_search'] = True
    context.user_data['admin_view_source'] = 'admin_search_user'
    text = escape_md(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID, –∏–º—è, username –∏–ª–∏ email):"
    )
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_USER_SEARCH

async def handle_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞.

    Returns:
        int: –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (ConversationHandler.END).
    """
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_user_search'):
        return ConversationHandler.END

    context.user_data.pop('awaiting_user_search', None)
    query = update.message.text.strip()

    try:
        users = await search_users(query)
        if not users:
            text = escape_md(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É `{query}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_user")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return ConversationHandler.END

        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è `{escape_md(query)}`:\n\n"
        keyboard = []
        for user in users[:10]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 4 –ø–æ–ª—è
            if len(user) < 4:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ª–∏—à–Ω–∏–µ
            u_id = user[0]
            u_name = user[1] if len(user) > 1 else None
            f_name = user[2] if len(user) > 2 else None
            email = user[3] if len(user) > 3 else None

            display_name = f_name or u_name or f"ID {u_id}"
            username_display = f"@{u_name}" if u_name and u_name != "–ë–µ–∑ –∏–º–µ–Ω–∏" else ""
            text += f"üë§ {escape_md(display_name)} {username_display} (ID: `{u_id}`)\n"
            text += f"üìß {escape_md(email or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            keyboard.append([InlineKeyboardButton(
                f"üë§ {truncate_text(display_name, 20)} (ID: {u_id})",
                callback_data=f"user_actions_{u_id}"
            )])

        if len(users) > 10:
            text += f"_...–∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π._"

        keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_user")])
        keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

    return ConversationHandler.END

async def broadcast_message_admin(context: ContextTypes.DEFAULT_TYPE, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."""
    bot = context.bot
    all_users_data, total_users_count = await get_all_users_stats(page_size=1000000)
    all_user_ids = [user_data[0] for user_data in all_users_data]
    
    sent_count = 0
    failed_count = 0
    total_to_send = len(all_user_ids)
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~{total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    for target_user_id_broadcast in all_user_ids:
        try:
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id_broadcast, photo=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id_broadcast, video=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id_broadcast,
                    text=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id_broadcast}: {type(e).__name__} - {e}")
            failed_count += 1
        
        if sent_count % 20 == 0:
            await asyncio.sleep(1)
    
    summary_text = (
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
    )
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(summary_text), reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
# === –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –§–ê–ô–õ–ê admin.py, –ß–ê–°–¢–¨ 2/3 ===
async def broadcast_to_paid_users(context: ContextTypes.DEFAULT_TYPE, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    bot = context.bot
    paid_user_ids = await get_paid_users()
    
    sent_count = 0
    failed_count = 0
    total_to_send = len(paid_user_ids)
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~{total_to_send} –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    for target_user_id in paid_user_ids:
        try:
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id,
                    text=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {type(e).__name__} - {e}")
            failed_count += 1
        
        if sent_count % 20 == 0:
            await asyncio.sleep(1)
    
    summary_text = (
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
    )
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(summary_text), reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def broadcast_to_non_paid_users(context: ContextTypes.DEFAULT_TYPE, message_text: str, admin_user_id: int, media_type: str = None, media_id: str = None) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    bot = context.bot
    non_paid_user_ids = await get_non_paid_users()
    
    sent_count = 0
    failed_count = 0
    total_to_send = len(non_paid_user_ids)
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –¥–ª—è {total_to_send} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ~{total_to_send} –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    for target_user_id in non_paid_user_ids:
        try:
            if media_type == 'photo' and media_id:
                await bot.send_photo(
                    chat_id=target_user_id, photo=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            elif media_type == 'video' and media_id:
                await bot.send_video(
                    chat_id=target_user_id, video=media_id,
                    caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await bot.send_message(
                    chat_id=target_user_id,
                    text=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {type(e).__name__} - {e}")
            failed_count += 1
        
        if sent_count % 20 == 0:
            await asyncio.sleep(1)
    
    summary_text = (
        f"üèÅ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
    )
    
    await send_message_with_fallback(
        bot, admin_user_id, escape_md(summary_text), reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")

async def initiate_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, broadcast_type: str) -> int:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É (–æ–±—â—É—é, –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –∏–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö)."""
    user_id = update.effective_user.id
    
    context.user_data[f'awaiting_{broadcast_type}_message'] = True
    context.user_data['broadcast_type'] = broadcast_type
    
    text = (
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]])
    
    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_BROADCAST_MESSAGE

async def handle_admin_chat_message(context: ContextTypes.DEFAULT_TYPE, target_user_id: int, message_text: str, media_type: str = None, media_id: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."""
    bot = context.bot
    admin_user_id = context.user_data.get('admin_user_id')
    
    try:
        if media_type == 'photo' and media_id:
            await bot.send_photo(
                chat_id=target_user_id, photo=media_id,
                caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        elif media_type == 'video' and media_id:
            await bot.send_video(
                chat_id=target_user_id, video=media_id,
                caption=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await bot.send_message(
                chat_id=target_user_id,
                text=escape_md(message_text + "\n\n‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        await send_message_with_fallback(
            bot, admin_user_id, escape_md(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await send_message_with_fallback(
            bot, admin_user_id, escape_md(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"),
            parse_mode=ParseMode.MARKDOWN_V2
        )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
async def handle_admin_generation_result(context: ContextTypes.DEFAULT_TYPE, admin_id: int, target_user_id: int, result_data: dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if result_data.get('success'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
            if result_data.get('image_url'):
                caption = escape_md(
                    f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üë§ –ê–≤–∞—Ç–∞—Ä: {context.user_data.get('active_avatar_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üé® –°—Ç–∏–ª—å: {result_data.get('style', 'custom')}\n"
                    f"üìù –ü—Ä–æ–º–ø—Ç: {result_data.get('prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                )
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ï—â–µ —Ä–∞–∑", callback_data=f"admin_generate:{target_user_id}")],
                    [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_send_gen:{target_user_id}:{result_data.get('generation_id')}")],
                    [InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
                ])
                
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=result_data['image_url'],
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=keyboard
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                context.user_data[f'last_admin_generation_{target_user_id}'] = {
                    'image_url': result_data['image_url'],
                    'generation_id': result_data.get('generation_id'),
                    'style': result_data.get('style'),
                    'prompt': result_data.get('prompt')
                }
                
            else:
                await send_message_with_fallback(
                    context.bot, admin_id,
                    escape_md(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ."),
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        else:
            error_msg = result_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await send_message_with_fallback(
                context.bot, admin_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}"),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await send_message_with_fallback(
            context.bot, admin_id,
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}"),
            parse_mode=ParseMode.MARKDOWN_V2
        )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def process_image_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, num_outputs: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    admin_id = update.effective_user.id
    parts = callback_data.split(':')
    target_user_id = int(parts[1])
    generation_id = parts[2] if len(parts) > 2 else None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    generation_data = context.user_data.get(f'last_admin_generation_{target_user_id}')
    if is_admin_generation and result_urls:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from handlers.admin import handle_admin_generation_result
        
        result_data = {
            'success': True,
            'image_urls': result_urls,
            'prompt': context.user_data.get('prompt', ''),
            'style': context.user_data.get('style_name', 'custom')
        }
        
        await handle_admin_generation_result(context, actual_user_id, target_user_id, result_data)
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        context.user_data.pop('is_admin_generation', None)
        context.user_data.pop('admin_generation_for_user', None)
    if not generation_data:
        await update.callback_query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        caption = escape_md(
            f"üéÅ –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n"
            f"‚ú® –°–æ–∑–¥–∞–Ω–æ –≤ –ø–æ–¥–∞—Ä–æ–∫ –ù–µ–π—Ä–æ—Å–µ—Ç—å—é\n"
            f"üé® –°—Ç–∏–ª—å: {generation_data.get('style', 'custom')}"
        )
        
        await context.bot.send_photo(
            chat_id=target_user_id,
            photo=generation_data['image_url'],
            caption=caption,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        await update.callback_query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await send_message_with_fallback(
            context.bot, admin_id,
            escape_md(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"),
            update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def generate_video_for_user(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    logger.debug(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id, escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=update, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    video_cost = 20
    if not await check_resources(context, target_user_id, required_photos=video_cost):
        await send_message_with_fallback(
            context.bot, user_id, escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."),
            update_or_query=update, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    context.user_data['admin_target_user_id'] = target_user_id
    context.user_data['generation_type'] = 'ai_video'
    context.user_data['model_key'] = 'kwaivgi/kling-v1.6-pro'
    context.user_data['video_cost'] = video_cost
    context.user_data['waiting_for_video_prompt'] = True

    text = escape_md(
        f"üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`\n\n"
        f"üìù –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ–æ:"
    )
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def delete_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    logger.debug(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
    
    text = (
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∞–≤–∞—Ç–∞—Ä—ã, –ø–ª–∞—Ç–µ–∂–∏ –∏ –ª–æ–≥–∏."
    )
    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=update,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user_{target_user_id}")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]), parse_mode=ParseMode.MARKDOWN_V2
    )

async def confirm_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º."""
    user_id = update.effective_user.id
    bot = context.bot
    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    try:
        target_user_info = await check_subscription(target_user_id)
        if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
            text = escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            reply_markup = await create_admin_keyboard()
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        try:
            await bot.send_message(
                chat_id=target_user_id,
                text=escape_md("‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={target_user_id}")
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e_notify}")

        success = await delete_user(target_user_id)
        if success:
            text = escape_md(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.")
            reply_markup = await create_admin_keyboard()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={target_user_id} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
        else:
            text = escape_md(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω.")
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]])
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}")

        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_md(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        reply_markup = await create_admin_keyboard()
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
async def handle_admin_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ handle_admin_text_input: user_id={user_id}")
        return ConversationHandler.END

    text = update.message.text.strip()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ user_id={user_id}: {text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if context.user_data.get('awaiting_block_reason'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_block_reason_input –¥–ª—è user_id={user_id}")
        return await handle_block_reason_input(update, context)
    
    if context.user_data.get('awaiting_broadcast_filters'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_broadcast_filters –¥–ª—è user_id={user_id}")
        return await handle_broadcast_filters(update, context)
    
    if context.user_data.get('awaiting_broadcast_message'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_broadcast_message –¥–ª—è user_id={user_id}")
        return await handle_broadcast_message(update, context)
    
    if context.user_data.get('awaiting_payments_date'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_payments_date_input –¥–ª—è user_id={user_id}")
        return await handle_payments_date_input(update, context)
    
    if context.user_data.get('awaiting_user_search'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_user_search_input –¥–ª—è user_id={user_id}")
        return await handle_user_search_input(update, context)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    if context.user_data.get('awaiting_balance_change'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_balance_change_input –¥–ª—è user_id={user_id}")
        return await handle_balance_change_input(update, context)
    
    if context.user_data.get('awaiting_activity_dates'):
        logger.debug(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_activity_dates_input –¥–ª—è user_id={user_id}")
        return await handle_activity_dates_input(update, context)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    logger.warning(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: {text}")
    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."),
        update_or_query=update,
        reply_markup=await create_admin_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return ConversationHandler.END

async def block_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int, block: bool = True) -> Optional[int]:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    action_emoji = "üîí" if block else "üîì"
    logger.debug(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {action} –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    if user_id not in ADMIN_IDS:
        await update.callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {action} –±–µ–∑ –ø—Ä–∞–≤: user_id={user_id}")
        return None

    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å target_user_id={target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    is_already_blocked = await is_user_blocked(target_user_id)
    if block and is_already_blocked:
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."),
            update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: target_user_id={target_user_id}")
        return None
    elif not block and not is_already_blocked:
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."),
            update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: target_user_id={target_user_id}")
        return None

    if block:
        context.user_data['awaiting_block_reason'] = {'target_user_id': target_user_id}
        text = safe_escape_markdown(
            f"‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
        )
        keyboard = [
            [InlineKeyboardButton("–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è target_user_id={target_user_id} –æ—Ç user_id={user_id}")
        return AWAITING_BLOCK_REASON
    else:
        text = safe_escape_markdown(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`?\n"
            "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{action_emoji} –î–∞, {action}", callback_data=f"confirm_block_user_{target_user_id}_unblock")],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
            ]), parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è target_user_id={target_user_id}")
        return None

async def handle_block_reason_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    user_id = update.effective_user.id
    logger.debug(f"–í—ã–∑–≤–∞–Ω–∞ handle_block_reason_input –¥–ª—è user_id={user_id}")

    if not context.user_data.get('awaiting_block_reason'):
        logger.warning(f"handle_block_reason_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_block_reason –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    target_user_id = context.user_data['awaiting_block_reason']['target_user_id']
    context.user_data.pop('awaiting_block_reason', None)
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è target_user_id={target_user_id}")

    if not update.message or not update.message.text:
        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id={user_id}, target_user_id={target_user_id}")
        error_text = safe_escape_markdown(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
        )
        keyboard = [
            [InlineKeyboardButton("–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await send_message_with_fallback(
            context.bot, user_id, error_text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        context.user_data['awaiting_block_reason'] = {'target_user_id': target_user_id}
        return AWAITING_BLOCK_REASON

    reason = update.message.text.strip()
    if not reason or len(reason) > 255:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç user_id={user_id} –¥–ª—è target_user_id={target_user_id}: {reason}")
        error_text = safe_escape_markdown(
            "‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
        )
        keyboard = [
            [InlineKeyboardButton("–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"confirm_block_user_{target_user_id}_block_no_reason")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]
        await send_message_with_fallback(
            context.bot, user_id, error_text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
        )
        context.user_data['awaiting_block_reason'] = {'target_user_id': target_user_id}
        return AWAITING_BLOCK_REASON

    logger.info(f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è target_user_id={target_user_id}: {reason}")
    await confirm_block_user(update, context, target_user_id, block=True, block_reason=reason)
    return ConversationHandler.END

async def confirm_block_user(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int, block: bool, block_reason: Optional[str] = None) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if block else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    action_emoji = "üîí" if block else "üîì"
    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {action} target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        await update.callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {action} –±–µ–∑ –ø—Ä–∞–≤: user_id={user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å target_user_id={target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        success = await block_user(target_user_id, block=block, block_reason=block_reason)
        if success:
            if block:
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                isolated_context = create_isolated_context(context, target_user_id)
                clean_admin_context(isolated_context)
                if target_user_id in context.user_data:
                    clean_admin_context(context.user_data[target_user_id])
                    logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id} –æ—á–∏—â–µ–Ω –∏–∑ context.user_data")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reason_text = f"\n–ü—Ä–∏—á–∏–Ω–∞: {block_reason}" if block_reason else ""
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=safe_escape_markdown(
                            f"üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help{reason_text}"
                        ),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={target_user_id}")
                except Exception as e_notify:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e_notify}")

            text = safe_escape_markdown(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ {action}."
                f"{f' –ü—Ä–∏—á–∏–Ω–∞: {block_reason}' if block_reason else ''}"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={target_user_id} {action} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")
        else:
            text = safe_escape_markdown(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        text = safe_escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)

async def cancel_block_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    user_id = update.effective_user.id
    logger.debug(f"–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è user_id={user_id}")

    if 'awaiting_block_reason' in context.user_data:
        target_user_id = context.user_data['awaiting_block_reason']['target_user_id']
        context.user_data.pop('awaiting_block_reason', None)
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown("‚úÖ –í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω."),
            update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è target_user_id={target_user_id} –æ—Ç user_id={user_id}")
    else:
        await send_message_with_fallback(
            context.bot, user_id,
            safe_escape_markdown("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è user_id={user_id}")

    return ConversationHandler.END

block_reason_handler = ConversationHandler(
    entry_points=[
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
            handle_block_reason_input
        )
    ],
    states={
        AWAITING_BLOCK_REASON: [
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS),
                handle_block_reason_input
            )
        ]
    },
    fallbacks=[
        CommandHandler("cancel", cancel_block_reason)
    ],
    per_user=True,
    per_chat=True
)

async def confirm_reset_avatar(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–±—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    try:
        target_user_info = await check_subscription(target_user_id)
        if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
            text = escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            reply_markup = await create_admin_keyboard()
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        avatars = await get_user_trainedmodels(target_user_id)
        if not avatars:
            text = escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞.")
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]])
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        for avatar_tuple in avatars:
            if len(avatar_tuple) >= 9:
                avatar_id = avatar_tuple[0]
                await delete_trained_model(target_user_id, avatar_id)

        await update_resources(target_user_id, "set_active_avatar", amount=0)
        
        text = escape_md(f"‚úÖ –í—Å–µ –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id} —Å–±—Ä–æ—à–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={target_user_id}: {e}", exc_info=True)
        text = escape_md(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        reply_markup = await create_admin_keyboard()
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

async def show_payments_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    text = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞).\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n`2025-05-26` –∏–ª–∏ `2025-05-01 2025-05-26`"
    )

    today = datetime.now().strftime('%Y-%m-%d')
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    last_7_days_start = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    last_30_days_start = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')

    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"payments_date_{today}_{today}")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data=f"payments_date_{yesterday}_{yesterday}")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data=f"payments_date_{last_7_days_start}_{today}")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data=f"payments_date_{last_30_days_start}_{today}")],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="payments_manual_date")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]

    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=update,
        reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_payments_date(update: Update, context: ContextTypes.DEFAULT_TYPE, start_date: str, end_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    user_id = update.effective_user.id
    bot = context.bot

    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
        datetime.strptime(start_date, '%Y-%m-%d')
        datetime.strptime(end_date, '%Y-%m-%d')
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {start_date} - {end_date}")
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-26."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
        payments = await get_payments_by_date(start_date, end_date)
        registrations = await get_registrations_by_date(start_date, end_date)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not payments and not registrations:
            text = escape_md(f"üö´ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_payments")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã Excel
        payments_filename = f"payments_{start_date}_{end_date}_{uuid.uuid4().hex[:8]}.xlsx"
        payments_file_path = create_payments_excel(payments, payments_filename, start_date, end_date)

        registrations_filename = f"registrations_{start_date}_{end_date}_{uuid.uuid4().hex[:8]}.xlsx"
        registrations_file_path = create_registrations_excel(registrations, registrations_filename, start_date, end_date)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        files_created = []
        if payments_file_path and os.path.exists(payments_file_path):
            files_created.append(('payments', payments_file_path, payments_filename))
        else:
            logger.error(f"–§–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π {payments_file_path} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        if registrations_file_path and os.path.exists(registrations_file_path):
            files_created.append(('registrations', registrations_file_path, registrations_filename))
        else:
            logger.error(f"–§–∞–π–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π {registrations_file_path} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        if not files_created:
            logger.error(f"–ù–∏ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {start_date} - {end_date}")
            await send_message_with_fallback(
                context.bot, user_id, escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."),
                update_or_query=update, reply_markup=await create_admin_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_payments = len(payments)
        total_amount = sum(p[2] for p in payments if p[2]) if payments else 0.0
        total_registrations = len(registrations)
        text = (
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}\n\n"
            f"üí∞ –ü–ª–∞—Ç–µ–∂–∏:\n"
            f"üî¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} RUB\n\n"
            f"üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            f"üî¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_registrations}\n\n"
            f"üìä Excel-—Ñ–∞–π–ª—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã
        await send_message_with_fallback(
            context.bot, user_id, escape_md(text), update_or_query=update,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        for file_type, file_path, filename in files_created:
            try:
                with open(file_path, 'rb') as f:
                    caption = f"{'–û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º' if file_type == 'payments' else '–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º'} —Å {start_date} –ø–æ {end_date}"
                    await bot.send_document(
                        chat_id=user_id, document=f, filename=filename, caption=caption
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for _, file_path, _ in files_created:
            try:
                os.remove(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e_remove:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e_remove}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_payments")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚úÖ –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"),
            parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {start_date} - {end_date}: {e}", exc_info=True)
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_manual_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data['awaiting_payments_date'] = True
    text = (
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`YYYY-MM-DD` (–¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è)\n–∏–ª–∏\n`YYYY-MM-DD YYYY-MM-DD` (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞).\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n`2025-05-26` –∏–ª–∏ `2025-05-01 2025-05-26`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_payments")]])

    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=update,
        reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
    )
    return AWAITING_PAYMENT_DATES

async def handle_payments_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    user_id = update.effective_user.id
    bot = context.bot
    text = update.message.text.strip()

    context.user_data['awaiting_payments_date'] = False

    try:
        dates = text.split()
        if len(dates) == 1:
            start_date = end_date = dates[0]
        elif len(dates) == 2:
            start_date, end_date = dates
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç.")

        await handle_payments_date(update, context, start_date, end_date)

    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
        await send_message_with_fallback(
            bot, user_id,
            escape_md("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD` –∏–ª–∏ `YYYY-MM-DD YYYY-MM-DD`. –ü—Ä–∏–º–µ—Ä: `2025-05-26` –∏–ª–∏ `2025-05-01 2025-05-26`."),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_payments")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    return ConversationHandler.END

async def visualize_registrations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")
        if not os.path.exists(DATABASE_PATH):
            logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATABASE_PATH}")
            text = escape_md("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)

        async with aiosqlite.connect(DATABASE_PATH) as conn:
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute(
                """
                SELECT DATE(created_at) as reg_date, COUNT(*) as count
                FROM users
                WHERE created_at BETWEEN ? AND ?
                GROUP BY DATE(created_at)
                ORDER BY reg_date
                """,
                (start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))
            )
            registrations = await c.fetchall()

        dates = []
        counts = []
        current_date = start_date
        while current_date <= end_date:
            dates.append(current_date.strftime('%Y-%m-%d'))
            counts.append(0)
            current_date += timedelta(days=1)

        for reg in registrations:
            reg_date = reg['reg_date']
            if reg_date in dates:
                counts[dates.index(reg_date)] = reg['count']

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        plt.bar(dates, counts, color='#2196F3', edgecolor='#1976D2')
        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

        await context.bot.send_photo(
            chat_id=user_id,
            photo=buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"
        )

        buffer.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def visualize_generations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞.

    Returns:
        None
    """
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await send_message_with_fallback(
            context.bot, user_id, escape_md("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."),
            update_or_query=update, reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {DATABASE_PATH}")
        if not os.path.exists(DATABASE_PATH):
            logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATABASE_PATH}")
            text = escape_md("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await send_message_with_fallback(
                context.bot, user_id, text, update_or_query=update,
                reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')

        log_entries = await get_generation_log_for_cost(start_date_str=start_date, end_date_str=end_date)

        dates = []
        generation_counts = {}
        current_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date_dt = datetime.strptime(end_date, '%Y-%m-%d')
        while current_date <= end_date_dt:
            dates.append(current_date.strftime('%Y-%m-%d'))
            current_date += timedelta(days=1)

        for entry in log_entries:
            model_id, units, _, created_at = entry
            date_str = str(created_at).split(' ')[0]
            if date_str in dates:
                if model_id not in generation_counts:
                    generation_counts[model_id] = [0] * len(dates)
                generation_counts[model_id][dates.index(date_str)] += units

        plt.figure(figsize=(12, 6))
        sns.set_style("whitegrid")
        colors = sns.color_palette("husl", len(generation_counts))

        for idx, (model_id, counts) in enumerate(generation_counts.items()):
            model_name = next(
                (m_data.get('name', model_id) for _, m_data in IMAGE_GENERATION_MODELS.items() if m_data.get('id') == model_id),
                model_id
            )
            plt.plot(dates, counts, label=model_name, color=colors[idx], linewidth=2)

        plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=14, pad=10)
        plt.xlabel("–î–∞—Ç–∞", fontsize=12)
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", fontsize=12)
        plt.xticks(rotation=45, ha='right')
        plt.legend(title="–ú–æ–¥–µ–ª–∏", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()

        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()

        text = escape_md("üì∏ –ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="admin_visualization")],
            [InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2
        )

        await context.bot.send_photo(
            chat_id=user_id,
            photo=buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        )

        buffer.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {e}", exc_info=True)
        text = escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(), parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_activity_dates_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    user_id = update.effective_user.id
    if not context.user_data.get('awaiting_activity_dates'):
        logger.warning(f"handle_activity_dates_input –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ awaiting_activity_dates –¥–ª—è user_id={user_id}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."),
            update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return ConversationHandler.END

    context.user_data.pop('awaiting_activity_dates', None)
    text = update.message.text.strip()

    try:
        dates = text.split()
        if len(dates) != 2:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD YYYY-MM-DD`")
        start_date, end_date = dates

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
        datetime.strptime(start_date, '%Y-%m-%d')
        datetime.strptime(end_date, '%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ start_date –Ω–µ –ø–æ–∑–∂–µ end_date
        if start_date > end_date:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è user_id={user_id} —Å {start_date} –ø–æ {end_date}")
        await handle_activity_stats(update, context, start_date, end_date)
    except ValueError as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –æ—Ç user_id={user_id}: {text}, –æ—à–∏–±–∫–∞: {e}")
        text = escape_md(
            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç: {str(e)}. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `YYYY-MM-DD YYYY-MM-DD`. –ü—Ä–∏–º–µ—Ä: `2025-05-01 2025-05-26`."
        )
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_stats")]
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        text = escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=update,
            reply_markup=await create_admin_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    return ConversationHandler.END
async def generate_photo_for_user(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    admin_id = update.effective_user.id
    logger.debug(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={admin_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, admin_id, escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=update, 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_model_data = await get_active_trainedmodel(target_user_id)
    if not active_model_data or active_model_data[3] != 'success':
        await send_message_with_fallback(
            context.bot, admin_id, 
            escape_md(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}` –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."),
            update_or_query=update,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    from handlers.utils import clean_admin_context
    clean_admin_context(context)
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={target_user_id}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
    context.user_data['admin_generation_for_user'] = target_user_id
    context.user_data['generation_type'] = 'admin_with_user_avatar'
    context.user_data['model_key'] = 'flux-trained'
    context.user_data['active_model_version'] = active_model_data[0]  # model_version
    context.user_data['active_trigger_word'] = active_model_data[1]    # trigger_word
    context.user_data['active_avatar_name'] = active_model_data[2]     # avatar_name
    context.user_data['is_admin_generation'] = True
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handle_style_selection —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from handlers.callbacks import handle_style_selection
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
    await handle_style_selection(update.callback_query, context, admin_id, "select_generic_avatar_styles")


# ===== –¢–ê–ö–ñ–ï –î–û–ë–ê–í–¨–¢–ï –§–£–ù–ö–¶–ò–Æ handle_admin_generation_result =====
# –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ generate_photo_for_user

async def handle_admin_generation_result(context: ContextTypes.DEFAULT_TYPE, admin_id: int, target_user_id: int, result_data: dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if result_data.get('success') and result_data.get('image_urls'):
            caption = escape_md(
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üë§ –ê–≤–∞—Ç–∞—Ä: {context.user_data.get('active_avatar_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üé® –°—Ç–∏–ª—å: {result_data.get('style', 'custom')}\n"
                f"üìù –ü—Ä–æ–º–ø—Ç: {result_data.get('prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')[:100]}..."
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ï—â–µ —Ä–∞–∑", callback_data=f"admin_generate:{target_user_id}")],
                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_send_gen:{target_user_id}")],
                [InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_photo(
                chat_id=admin_id,
                photo=result_data['image_urls'][0],
                caption=caption,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            context.user_data[f'last_admin_generation_{target_user_id}'] = {
                'image_urls': result_data.get('image_urls'),
                'prompt': result_data.get('prompt'),
                'style': result_data.get('style')
            }
            
        else:
            error_msg = result_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await send_message_with_fallback(
                context.bot, admin_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}"),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await send_message_with_fallback(
            context.bot, admin_id,
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}"),
            parse_mode=ParseMode.MARKDOWN_V2
        )