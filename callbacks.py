import aiosqlite
import os
import re
import logging
import asyncio
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from datetime import datetime, timedelta
from config import (
    ADMIN_IDS, TARIFFS, IMAGE_GENERATION_MODELS,
    GENERATION_STYLES, NEW_MALE_AVATAR_STYLES, NEW_FEMALE_AVATAR_STYLES,
    style_prompts, new_male_avatar_prompts, new_female_avatar_prompts
)
from database import (
    check_subscription, update_resources, add_rating,
    get_user_trainedmodels, get_active_trainedmodel,
    delete_trained_model, get_user_video_tasks, get_user_rating_and_registration,
    get_user_generation_stats, get_user_payments
)
from keyboards import (
    create_main_menu_keyboard, create_subscription_keyboard,
    create_user_profile_keyboard, create_generate_menu_keyboard,
    create_admin_keyboard, create_aspect_ratio_keyboard,
    create_avatar_selection_keyboard, create_training_keyboard,
    create_prompt_selection_keyboard, create_avatar_style_choice_keyboard,
    create_new_male_avatar_styles_keyboard, create_new_female_avatar_styles_keyboard,
    create_confirmation_keyboard, create_back_keyboard,
    create_referral_keyboard, create_admin_user_actions_keyboard
)
from generation import (
    reset_generation_context, generate_image, start_training,
    handle_generate_video, check_training_status
)
from handlers.utils import (
    safe_escape_markdown as escape_md,
    send_message_with_fallback, safe_answer_callback,
    check_resources, check_active_avatar,
    check_style_config, create_payment_link,
    get_tariff_text, send_typing_action
)
from handlers.admin import (
    show_admin_stats, show_user_actions,
    show_user_profile_admin, show_user_avatars_admin,
    show_replicate_costs, broadcast_message_admin,
    broadcast_to_paid_users, broadcast_to_non_paid_users,
    show_payments_menu, handle_payments_date, handle_manual_date_input,
    generate_photo_for_user, generate_video_for_user,
    delete_user_admin, confirm_delete_user,
    block_user_admin, confirm_block_user, is_user_blocked,
    show_activity_stats, show_referral_stats, show_visualization,
    visualize_payments, visualize_registrations, visualize_generations,
    change_balance_admin, show_user_logs, initiate_filtered_broadcast,
    search_users_admin, handle_activity_stats,
    admin_show_failed_avatars, admin_confirm_delete_all_failed, admin_execute_delete_all_failed
)

logger = logging.getLogger(__name__)

# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ó–ê–ü–†–û–°–û–í ===

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    user_id = update.effective_user.id

    if not query:
        logger.warning(f"button –≤—ã–∑–≤–∞–Ω –±–µ–∑ callback_query –¥–ª—è user_id={user_id}")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await is_user_blocked(user_id):
        await query.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help"),
            update_or_query=update,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å callback: {query.data}")
        return None

    await query.answer()
    callback_data = query.data
    logger.info(f"Callback –æ—Ç user_id={user_id}: {callback_data}")

    bot = context.bot
    context._user_id = user_id

    try:
        # === –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê ===
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if callback_data == "back_to_menu":
            reset_generation_context(context, "back_to_menu")
            from handlers.commands import menu
            await menu(update, context)
            return None

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        elif callback_data == "support":
            await handle_support(query, context, user_id)
            return None

        # FAQ
        elif callback_data == "faq":
            await handle_faq(query, context, user_id)
            return None

        # FAQ —Ç–µ–º—ã
        elif callback_data.startswith("faq_"):
            topic = callback_data.replace("faq_", "")
            await handle_faq_topic(query, context, user_id, topic)
            return None

        # === –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –ì–ï–ù–ï–†–ê–¶–ò–ò ===
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
        elif callback_data == "proceed_to_payment":
            await handle_proceed_to_payment(query, context, user_id)
            return None

        # –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        elif callback_data == "generate_menu":
            await handle_generate_menu(query, context, user_id)
            return None

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º
        elif callback_data == "generate_with_avatar":
            await handle_generate_with_avatar(query, context, user_id)
            return None

        # –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
        elif callback_data == "photo_to_photo":
            await handle_photo_to_photo(query, context, user_id)
            return None

        # AI-–≤–∏–¥–µ–æ
        elif callback_data in ["ai_video", "ai_video_v2"]:
            await handle_ai_video(query, context, user_id, callback_data)
            return None

        # –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        elif callback_data == "repeat_last_generation":
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                from generation.images import user_last_generation_params, user_last_generation_lock
                
                async with user_last_generation_lock:
                    last_params = user_last_generation_params.get(user_id)
                
                if not last_params:
                    await send_message_with_fallback(
                        bot, user_id,
                        escape_md("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /menu ‚Üí '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'."),
                        update_or_query=update,
                        reply_markup=await create_main_menu_keyboard(user_id),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    return None
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                reset_generation_context(context, "repeat_generation")
                context.user_data.update(last_params)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º model_key –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not context.user_data.get('model_key'):
                    generation_type = context.user_data.get('generation_type')
                    if generation_type in ['with_avatar', 'photo_to_photo']:
                        context.user_data['model_key'] = 'flux-trained'
                    else:
                        context.user_data['model_key'] = 'flux-trained'
                
                logger.info(f"–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {list(context.user_data.keys())}")
                logger.info(f"–ü–æ–≤—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: generation_type={context.user_data.get('generation_type')}, model_key={context.user_data.get('model_key')}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
                await generate_image(update, context, num_outputs=2)
                return None
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ repeat_last_generation: {e}", exc_info=True)
                await send_message_with_fallback(
                    bot, user_id,
                    escape_md("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /menu."),
                    update_or_query=update,
                    reply_markup=await create_main_menu_keyboard(user_id),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return None


        # === –í–´–ë–û–† –°–¢–ò–õ–ï–ô –ò –ü–†–û–ú–ü–¢–û–í ===
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π
        elif callback_data in ["select_generic_avatar_styles", "select_new_male_avatar_styles", "select_new_female_avatar_styles"]:
            await handle_style_selection(query, context, user_id, callback_data)
            return None

        # –í—ã–±–æ—Ä —Å—Ç–∏–ª—è
        elif callback_data.startswith("style_"):
            await handle_style_choice(query, context, user_id, callback_data)
            return None
            
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
        elif callback_data.startswith("male_styles_page_"):
            page = int(callback_data.split("_")[-1])
            await handle_male_styles_page(query, context, user_id, page)
            return None

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
        elif callback_data.startswith("female_styles_page_"):
            page = int(callback_data.split("_")[-1])
            await handle_female_styles_page(query, context, user_id, page)
            return None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        elif callback_data == "page_info":
            await safe_answer_callback(query, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
            return None

        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
        elif callback_data == "enter_custom_prompt_manual":
            await handle_custom_prompt_manual(query, context, user_id)
            return None

        # –í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º
        elif callback_data == "enter_custom_prompt_llama":
            await handle_custom_prompt_llama(query, context, user_id)
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ AI-–ø—Ä–æ–º–ø—Ç–∞
        elif callback_data == "confirm_assisted_prompt":
            await handle_confirm_assisted_prompt(query, context, user_id)
            return None

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–ø—Ä–æ–º–ø—Ç–∞
        elif callback_data == "edit_assisted_prompt":
            await handle_edit_assisted_prompt(query, context, user_id)
            return None

        # –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–º–ø—Ç–∞
        elif callback_data == "skip_prompt":
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           generation_type = context.user_data.get('generation_type', 'photo_to_photo')
           model_key = context.user_data.get('model_key', 'flux-trained')
           reference_image_url = context.user_data.get('reference_image_url')
           photo_path = context.user_data.get('photo_path')
    
           context.user_data['prompt'] = "copy reference style"
    
           # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           context.user_data['generation_type'] = generation_type
           context.user_data['model_key'] = model_key
           if reference_image_url:
               context.user_data['reference_image_url'] = reference_image_url
           if photo_path:
               context.user_data['photo_path'] = photo_path
    
           logger.info(f"skip_prompt: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è user_id={user_id}")
           logger.info(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: generation_type={generation_type}, model_key={model_key}")
    
           await ask_for_aspect_ratio(update, context)

        # === –í–´–ë–û–† –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –°–¢–û–†–û–ù ===
        
        # –í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        elif callback_data.startswith("aspect_"):
            await handle_aspect_ratio(query, context, user_id, callback_data)
            return None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å—Ç–æ—Ä–æ–Ω
        elif callback_data == "aspect_ratio_info":
            await handle_aspect_ratio_info(query, context, user_id)
            return None

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        elif callback_data == "back_to_aspect_selection":
            await handle_back_to_aspect_selection(query, context, user_id)
            return None

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
        elif callback_data == "back_to_style_selection":
            await handle_back_to_style_selection(query, context, user_id)
            return None

        # === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò ===
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢!
        elif callback_data == "confirm_generation":
            await handle_confirm_generation(query, context, user_id, update)
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
        elif callback_data == "confirm_photo_quality":
            await handle_confirm_photo_quality(query, context, user_id, update)
            return None

        # –ü—Ä–æ–ø—É—Å–∫ –º–∞—Å–∫–∏
        elif callback_data == "skip_mask":
            await handle_skip_mask(query, context, user_id)
            return None

        # === –û–¶–ï–ù–ö–ê –ò –†–ï–ô–¢–ò–ù–ì ===
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        elif callback_data.startswith("rate_"):
            await handle_rating(query, context, user_id, callback_data)
            return None

        # === –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===
        
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data == "user_profile":
            await handle_user_profile(query, context, user_id)
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        elif callback_data == "check_subscription":
            await handle_check_subscription(query, context, user_id)
            return None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data == "user_stats":
            await handle_user_stats(query, context, user_id)
            return None

        # –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞
        elif callback_data == "subscribe":
            await handle_subscribe(query, context, user_id)
            return None

        # –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞
        elif callback_data.startswith("pay_"):
            await handle_payment(query, context, user_id, callback_data)
            return None

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ email
        elif callback_data == "change_email":
            await handle_change_email(query, context, user_id)
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è email
        elif callback_data == "confirm_change_email":
            await handle_confirm_change_email(query, context, user_id)
            return None

        # === –ê–í–ê–¢–ê–†–´ ===
        
        # –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã
        elif callback_data == "my_avatars":
            await handle_my_avatars(query, context, user_id)
            return None

        # –í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞
        elif callback_data.startswith("select_avatar_"):
            await handle_select_avatar(query, context, user_id, callback_data)
            return None

        # –û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        elif callback_data == "train_flux":
            await handle_train_flux(query, context, user_id)
            return None

        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        elif callback_data == "continue_upload":
            await handle_continue_upload(query, context, user_id)
            return None

        # –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è
        elif callback_data == "start_training":
            await handle_start_training(query, context, user_id, update)
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        elif callback_data == "confirm_start_training":
            await handle_confirm_start_training(query, context, user_id, update)
            return None

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞
        elif callback_data == "back_to_avatar_name_input":
            await handle_back_to_avatar_name(query, context, user_id)
            return None

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞
        elif callback_data.startswith("use_suggested_trigger_"):
            await handle_use_suggested_trigger(query, context, user_id, callback_data)
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        elif callback_data == "check_training":
            from handlers.commands import check_training
            await check_training(update, context)
            return None

        # === –†–ï–§–ï–†–ê–õ–´ ===
        
        # –†–µ—Ñ–µ—Ä–∞–ª—ã
        elif callback_data == "referrals":
            await handle_referrals_menu(query, context, user_id)
            return None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        elif callback_data == "referral_info":
            await handle_referral_info(query, context, user_id)
            return None

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        elif callback_data == "copy_referral_link":
            await handle_copy_referral_link(query, context, user_id)
            return None

        # –ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        elif callback_data == "referral_help":
            await handle_referral_help(query, context, user_id)
            return None

        # –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        elif callback_data == "my_referrals":
            await handle_my_referrals(query, context, user_id)
            return None

        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –†–ê–ó–î–ï–õ–´ ===
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        elif callback_data == "payment_history":
            await handle_payment_history(query, context, user_id)
            return None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
        elif callback_data == "tariff_info":
            await handle_tariff_info(query, context, user_id)
            return None

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        elif callback_data == "category_info":
            await handle_category_info(query, context, user_id)
            return None

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
        elif callback_data == "compare_tariffs":
            await handle_compare_tariffs(query, context, user_id)
            return None

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        elif callback_data == "help":
            from handlers.commands import help_command
            await help_command(update, context)
            return None

        # === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===
        
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        elif callback_data == "admin_panel" and user_id in ADMIN_IDS:
            await handle_admin_panel(query, context, user_id)
            return None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞
        elif callback_data == "admin_stats" and user_id in ADMIN_IDS:
            await show_admin_stats(update, context)
            return None

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif callback_data.startswith("admin_stats_page_") and user_id in ADMIN_IDS:
            page = int(callback_data.split("_")[-1])
            await show_admin_stats(update, context, page)
            return None

        # –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        elif callback_data.startswith("user_actions_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_actions(update, context, target_user_id)
            return None

        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
        elif callback_data.startswith("user_profile_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_profile_admin(update, context, target_user_id)
            return None

        # –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
        elif callback_data.startswith("user_avatars_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_avatars_admin(update, context, target_user_id)
            return None

        # –†–∞—Å—Ö–æ–¥—ã Replicate
        elif callback_data == "admin_replicate_costs" and user_id in ADMIN_IDS:
            await show_replicate_costs(update, context)
            return None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        elif callback_data == "admin_payments" and user_id in ADMIN_IDS:
            await show_payments_menu(update, context)
            return None

        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        elif callback_data.startswith("payments_date_") and user_id in ADMIN_IDS:
            dates = callback_data.replace("payments_date_", "").split("_")
            start_date, end_date = dates[0], dates[1]
            await handle_payments_date(update, context, start_date, end_date)
            return None

        # –í–≤–æ–¥ –¥–∞—Ç –≤—Ä—É—á–Ω—É—é
        elif callback_data == "payments_manual_date" and user_id in ADMIN_IDS:
            return await handle_manual_date_input(update, context)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        elif callback_data == "admin_activity_stats" and user_id in ADMIN_IDS:
            await show_activity_stats(update, context)
            return None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        elif callback_data == "activity_30_days" and user_id in ADMIN_IDS:
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            await handle_activity_stats(update, context, start_date, end_date)
            return None
        
        elif callback_data == "activity_7_days" and user_id in ADMIN_IDS:
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            await handle_activity_stats(update, context, start_date, end_date)
            return None

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elif callback_data == "admin_referral_stats" and user_id in ADMIN_IDS:
            await show_referral_stats(update, context)
            return None

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        elif callback_data == "admin_visualization" and user_id in ADMIN_IDS:
            await show_visualization(update, context)
            return None

        # –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        elif callback_data == "visualize_payments" and user_id in ADMIN_IDS:
            await visualize_payments(update, context)
            return None

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        elif callback_data == "visualize_registrations" and user_id in ADMIN_IDS:
            await visualize_registrations(update, context)
            return None

        # –ì—Ä–∞—Ñ–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        elif callback_data == "visualize_generations" and user_id in ADMIN_IDS:
            await visualize_generations(update, context)
            return None

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        elif callback_data.startswith("change_balance_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            return await change_balance_admin(update, context, target_user_id)

        # –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.startswith("user_logs_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await show_user_logs(update, context, target_user_id)
            return None

        # –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        elif callback_data == "admin_filtered_broadcast" and user_id in ADMIN_IDS:
            return await initiate_filtered_broadcast(update, context)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
        elif callback_data == "admin_scheduled_broadcast" and user_id in ADMIN_IDS:
            return await initiate_scheduled_broadcast(update, context)

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        elif callback_data == "admin_search_user" and user_id in ADMIN_IDS:
            return await search_users_admin(update, context)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.startswith("generate_photo_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            from handlers.utils import clean_admin_context
            clean_admin_context(context)
            context.user_data['admin_target_user_id'] = target_user_id
            await generate_photo_for_user(update, context, target_user_id)
            return None

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        elif callback_data.startswith("admin_send_gen:") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split(':')[1])
            generation_data = context.user_data.get(f'last_admin_generation_{target_user_id}')
            
            if generation_data and generation_data.get('image_urls'):
                try:
                    await context.bot.send_photo(
                        chat_id=target_user_id,
                        photo=generation_data['image_urls'][0],
                        caption=escape_md("üéÅ –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"),
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
                except Exception as e:
                    await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            else:
                await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return None
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–º
        elif callback_data.startswith("admin_generate:") and user_id in ADMIN_IDS:
            if ':' in callback_data:
                target_user_id = int(callback_data.split(':')[1])
                await generate_photo_for_user(update, context, target_user_id)
            return None

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.startswith("generate_video_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            context.user_data['admin_target_user_id'] = target_user_id
            await generate_video_for_user(update, context, target_user_id)
            return None

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.startswith("delete_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await delete_user_admin(update, context, target_user_id)
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        elif callback_data.startswith("confirm_delete_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await confirm_delete_user(update, context, target_user_id)
            return None

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        elif callback_data.startswith("block_user_") and user_id in ADMIN_IDS:
            parts = callback_data.split("_")
            target_user_id = int(parts[2])
            action = parts[3]
            await block_user_admin(update, context, target_user_id, block=(action == "block"))
            return None

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        elif callback_data.startswith("confirm_block_user_"):
            parts = callback_data.split("_")
            if len(parts) < 4:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data={callback_data}")
                await send_message_with_fallback(
                    bot, user_id,
                    safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."),
                    update_or_query=update,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                return None

            try:
                target_user_id = int(parts[3])
                action = parts[4]
                reason = None if action == "block_no_reason" else None
                await confirm_block_user(update, context, target_user_id, block=(action.startswith("block")), block_reason=reason)
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç target_user_id –≤ callback_data={callback_data}")
                await send_message_with_fallback(
                    bot, user_id,
                    safe_escape_markdown("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."),
                    update_or_query=update,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            return None

        # –°–±—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–æ–≤
        elif callback_data.startswith("reset_avatar_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await handle_admin_reset_avatar(query, context, user_id, target_user_id)
            return None
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
        elif callback_data == "admin_failed_avatars" and user_id in ADMIN_IDS:
            await admin_show_failed_avatars(update, context)
            return None
        elif callback_data == "admin_delete_all_failed" and user_id in ADMIN_IDS:
            await admin_confirm_delete_all_failed(update, context)
            return None
        elif callback_data == "admin_confirm_delete_all" and user_id in ADMIN_IDS:
            await admin_execute_delete_all_failed(update, context)
            return None

        # –†–∞—Å—Å—ã–ª–∫–∏
        elif callback_data in ["broadcast_all", "broadcast_paid", "broadcast_non_paid"] and user_id in ADMIN_IDS:
            return await initiate_broadcast(update, context, callback_data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        elif callback_data == "send_broadcast_no_text" and user_id in ADMIN_IDS:
            broadcast_type = context.user_data.get('broadcast_type')
            media_type = context.user_data.get('admin_media_type')
            media_id = context.user_data.get('admin_media_id')

            if not broadcast_type:
                await query.answer("‚ùå –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
                await query.message.edit_text(
                    escape_md("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω."),
                    parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=await create_admin_keyboard(user_id)
                )
                return None

            await query.answer("üì¢ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç–∞...")
            if broadcast_type == 'broadcast_all':
                asyncio.create_task(broadcast_message_admin(context, "", user_id, media_type, media_id))
            elif broadcast_type == 'broadcast_paid':
                asyncio.create_task(broadcast_to_paid_users(context, "", user_id, media_type, media_id))
            elif broadcast_type == 'broadcast_non_paid':
                asyncio.create_task(broadcast_to_non_paid_users(context, "", user_id, media_type, media_id))

            context.user_data.pop(f'awaiting_{broadcast_type}_message', None)
            context.user_data.pop('broadcast_type', None)
            context.user_data.pop('admin_media_type', None)
            context.user_data.pop('admin_media_id', None)

            await query.message.edit_text(
                escape_md("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"),
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=await create_admin_keyboard(user_id)
            )
            return None

        # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        elif callback_data == "admin_give_subscription" and user_id in ADMIN_IDS:
            await handle_admin_give_subscription(query, context, user_id)
            return None

        elif callback_data.startswith("give_subscription_for_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await handle_admin_give_sub_to_user(query, context, user_id, target_user_id)
            return None

        elif callback_data.startswith("add_photos_to_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await handle_admin_add_resources(query, context, user_id, target_user_id, "photo", 20)
            return None

        elif callback_data.startswith("add_avatar_to_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await handle_admin_add_resources(query, context, user_id, target_user_id, "avatar", 1)
            return None

        elif callback_data.startswith("chat_with_user_") and user_id in ADMIN_IDS:
            target_user_id = int(callback_data.split("_")[-1])
            await handle_admin_chat_with_user(query, context, user_id, target_user_id)
            return None

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data} –æ—Ç user_id={user_id}")
            await safe_answer_callback(query, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback –¥–ª—è user_id={user_id}, data={callback_data}: {e}", exc_info=True)
        await send_message_with_fallback(
            bot,
            user_id,
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."),
            update_or_query=update,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ ===

async def handle_proceed_to_payment(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    subscription_data = await check_subscription(user_id)
    first_purchase = bool(subscription_data[5]) if subscription_data and len(subscription_data) > 5 else True

    tariff_text = get_tariff_text(first_purchase)
    subscription_kb = await create_subscription_keyboard()

    await send_message_with_fallback(
        context.bot, user_id, tariff_text, update_or_query=query,
        reply_markup=subscription_kb, parse_mode=ParseMode.MARKDOWN_V2
    )

async def delete_all_videos(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ (–º–µ–Ω—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏), –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."""
    if 'menu_video_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=context.user_data['menu_video_message_id'])
            context.user_data.pop('menu_video_message_id', None)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—é: {e}")

    if 'generation_video_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=context.user_data['generation_video_message_id'])
            context.user_data.pop('generation_video_message_id', None)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

async def handle_generate_menu(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    await delete_all_videos(context, user_id)
    # –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –∑–¥–µ—Å—å - —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ

    text = (
        "‚ú® –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:\n\n"
        "üì∏ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º\n"
        "–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º AI-–∞–≤–∞—Ç–∞—Ä–æ–º. "
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –∑–∞ —Å–µ–∫—É–Ω–¥—ã!\n\n"
        "üñº –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É\n"
        "–ó–∞–≥—Ä—É–∑–∏ –ª—é–±–æ–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏ –µ–≥–æ –≤ —à–µ–¥–µ–≤—Ä —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º. "
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –æ–±—Ä–∞–∑–æ–≤!\n\n"
        "üé¨ AI-–≤–∏–¥–µ–æ\n"
        "–û–∂–∏–≤–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ "
        "–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏."
    )

    generation_video_path = "images/generation.mp4"
    try:
        if os.path.exists(generation_video_path):
            with open(generation_video_path, "rb") as video_file:
                video_message = await context.bot.send_video(
                    chat_id=user_id, video=video_file,
                    caption=escape_md(text),
                    reply_markup=await create_generate_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                context.user_data['generation_video_message_id'] = video_message.message_id
        else:
            logger.warning(f"–í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {generation_video_path}")
            await send_message_with_fallback(
                context.bot, user_id, escape_md(text), update_or_query=query,
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        await send_message_with_fallback(
            context.bot, user_id, escape_md(text), update_or_query=query,
            reply_markup=await create_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_generate_with_avatar(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º."""
    await delete_all_videos(context, user_id)
    if not await check_active_avatar(context, user_id):
        return

    if not await check_resources(context, user_id, required_photos=2):
        return

    context.user_data['generation_type'] = 'with_avatar'
    context.user_data['model_key'] = "flux-trained"

    text = escape_md("üë§ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=await create_avatar_style_choice_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_style_selection(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ª–µ–π."""
    if callback_data == "select_generic_avatar_styles":
        context.user_data['current_style_set'] = 'generic_avatar'
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –£–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è generic_avatar –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –º—É–∂—Å–∫–æ–≥–æ –∏–ª–∏ –∂–µ–Ω—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–∏–µ —Å—Ç–∏–ª–∏", callback_data="select_new_male_avatar_styles")],
            [InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–µ —Å—Ç–∏–ª–∏", callback_data="select_new_female_avatar_styles")],
            [InlineKeyboardButton("‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="custom_prompt_for_avatar")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="generate_with_avatar")]
        ])
        text = escape_md("üë§ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:")
        
        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=query,
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    elif callback_data == "select_new_male_avatar_styles":
        context.user_data['current_style_set'] = 'new_male_avatar'
        context.user_data['selected_gender'] = 'man'
        if not check_style_config('new_male_avatar'):
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                update_or_query=query,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        keyboard = await create_new_male_avatar_styles_keyboard(page=1)
        text = escape_md("üë® –í—ã–±–µ—Ä–∏ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:")

    elif callback_data == "select_new_female_avatar_styles":
        context.user_data['current_style_set'] = 'new_female_avatar'
        context.user_data['selected_gender'] = 'woman'
        if not check_style_config('new_female_avatar'):
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                update_or_query=query,
                reply_markup=await create_main_menu_keyboard(user_id),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return

        keyboard = await create_new_female_avatar_styles_keyboard(page=1)
        text = escape_md("üë© –í—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
async def handle_custom_prompt_for_avatar(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É —Å–≤–æ–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞."""
    context.user_data['awaiting_custom_prompt'] = True
    context.user_data['current_style_set'] = 'custom_avatar'
    
    text = escape_md("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º:")
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—è–º", callback_data="generate_with_avatar")]
    ])
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_style_choice(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""
    logger.debug(f"handle_style_choice: callback_data = {callback_data}")

    if callback_data.startswith("style_generic_"):
        style_key = callback_data.replace("style_generic_", "")
        prompt = style_prompts.get(style_key)
        style_name = GENERATION_STYLES.get(style_key, style_key)
        logger.debug(f"Generic style: key={style_key}, name={style_name}")

    elif callback_data.startswith("style_new_male_"):
        style_key = callback_data.replace("style_new_male_", "")
        prompt = new_male_avatar_prompts.get(style_key)
        style_name = NEW_MALE_AVATAR_STYLES.get(style_key, style_key)
        logger.debug(f"Male style: key={style_key}, name={style_name}")

    elif callback_data.startswith("style_new_female_"):
        style_key = callback_data.replace("style_new_female_", "")
        prompt = new_female_avatar_prompts.get(style_key)
        style_name = NEW_FEMALE_AVATAR_STYLES.get(style_key, style_key)
        logger.debug(f"Female style: key={style_key}, name={style_name}")

    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —Å—Ç–∏–ª—è: {callback_data}")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."),
            update_or_query=query,
            reply_markup=await create_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    if not prompt:
        logger.error(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–∏–ª—è '{style_key}'")
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md(f"‚ùå –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è '{style_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=query,
            reply_markup=await create_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    context.user_data['prompt'] = prompt
    logger.info(f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å '{style_name}' –¥–ª—è user_id={user_id}")

    await send_message_with_fallback(
        context.bot, user_id,
        escape_md(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style_name}"),
        update_or_query=query,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await ask_for_aspect_ratio(query, context)

async def handle_male_styles_page(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, page: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º—É–∂—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π."""
    context.user_data['current_style_set'] = 'new_male_avatar'
    context.user_data['selected_gender'] = 'man'

    keyboard = await create_new_male_avatar_styles_keyboard(page)
    text = escape_md("üë® –í—ã–±–µ—Ä–∏ –º—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_female_styles_page(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, page: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∂–µ–Ω—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π."""
    context.user_data['current_style_set'] = 'new_female_avatar'
    context.user_data['selected_gender'] = 'woman'

    keyboard = await create_new_female_avatar_styles_keyboard(page)
    text = escape_md("üë© –í—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_photo_to_photo(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ photo-to-photo –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    await delete_all_videos(context, user_id)
    if not await check_active_avatar(context, user_id):
        return

    if not await check_resources(context, user_id, required_photos=2):
        return

    # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π
    reset_generation_context(context, "photo_to_photo", partial=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    context.user_data['generation_type'] = 'photo_to_photo'
    context.user_data['model_key'] = "flux-trained"
    context.user_data['waiting_for_photo'] = True

    text = (
        "üñº–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É\n\n"
        "–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º. "
        "üìùPixelPie Ai —Å–æ–∑–¥–∞—Å—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ —Å–∞–º!."
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="generate_menu")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
async def handle_skip_prompt(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è photo-to-photo."""
    logger.info(f"skip_prompt: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è user_id={user_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    context.user_data['prompt'] = 'copy reference style'
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: generation_type={context.user_data.get('generation_type')}, model_key={context.user_data.get('model_key')}")
    
    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:"),
        update_or_query=query,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await ask_for_aspect_ratio(query, context)

async def handle_skip_mask(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å–∫–∏."""
    context.user_data['mask_path'] = None
    context.user_data['waiting_for_mask'] = False

    context.user_data['prompt'] = "copy"

    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚úÖ –ú–∞—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."),
        update_or_query=query,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await ask_for_aspect_ratio(query, context)

async def handle_ai_video(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –≤–∏–¥–µ–æ."""
    # TODO: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å handle_generate_video –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞.
    if callback_data == "ai_video_v2":
        model_key = "kwaivgi/kling-v2.0"
        required_photos = 30
        generation_type = "ai_video_v2"
    else:
        model_key = "kwaivgi/kling-v1.6-pro"
        required_photos = 20
        generation_type = "ai_video"

    if not await check_resources(context, user_id, required_photos=required_photos):
        return

    reset_generation_context(context, generation_type)
    context.user_data['generation_type'] = generation_type
    context.user_data['model_key'] = model_key
    context.user_data['video_cost'] = required_photos
    context.user_data['waiting_for_video_prompt'] = True

    model_name = IMAGE_GENERATION_MODELS.get(model_key, {}).get('name', 'AI-–í–∏–¥–µ–æ')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π handle_generate_video
    if generation_type in ['ai_video', 'ai_video_v2']:
        text = (
            f"üé¨ {(model_name)}\n\n"
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{required_photos} —Ñ–æ—Ç–æ* —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –≤–∏–¥–µ–æ, "
            "–ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∑—è—Ç–æ–µ –∑–∞ –æ—Å–Ω–æ–≤—É.\n\n"
            "üìù 1. –û–ø–∏—à–∏, –∫–∞–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∏–¥–µ–æ:\n\n"
            "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–º–µ—Ä–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –æ–±—ä–µ–∫—Ç—É, "
            "—á–µ–ª–æ–≤–µ–∫ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –∏ —É–ª—ã–±–∞–µ—Ç—Å—è, "
            "–¥—ã–º –ø–ª–∞–≤–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö_"
        )
    else:  # photo_to_video
        text = (
            f"üé• {(model_name)}\n\n"
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{required_photos} —Ñ–æ—Ç–æ* —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n"
            "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ –≤ –∂–∏–≤–æ–µ –≤–∏–¥–µ–æ.\n\n"
            "üìù 1. –û–ø–∏—à–∏, –∫–∞–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å:\n\n"
            "_–ü–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, "
            "–∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é_"
        )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="generate_menu")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_custom_prompt_manual(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞."""
    context.user_data['waiting_for_custom_prompt_manual'] = True
    context.user_data['came_from_custom_prompt'] = True

    text = escape_md("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –Ω–∞ —Ñ–æ—Ç–æ):")

    back_callback = "back_to_style_selection"
    if context.user_data.get('generation_type') == 'photo_to_photo':
        back_callback = "photo_to_photo"

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_custom_prompt_llama(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–í–≤–æ–¥ –∏–¥–µ–∏ –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å –∞–≤–∞—Ç–∞—Ä–æ–º."""
    if not await check_active_avatar(context, user_id):
        return

    context.user_data['waiting_for_custom_prompt_llama'] = True
    context.user_data['generation_type'] = 'with_avatar'
    context.user_data['use_llama_prompt'] = True

    text = (
        "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ç–≤–æ–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º!\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∞ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ—ë –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: _\"–¥–µ–ª–æ–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ –æ—Ñ–∏—Å–µ\"_ –∏–ª–∏ _\"–¥–µ–≤—É—à–∫–∞ –Ω–∞ –ø–ª—è–∂–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ\"_"
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_style_selection")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_confirm_assisted_prompt(query, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞."""
    context.user_data['model_key'] = "flux-trained"
    context.user_data['generation_type'] = 'with_avatar'

    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("‚úÖ –ü—Ä–æ–º–ø—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:"),
        update_or_query=query,
        reply_markup=await create_aspect_ratio_keyboard(),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_edit_assisted_prompt(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç AI –ø–æ–º–æ—â–Ω–∏–∫–∞."""
    context.user_data['waiting_for_custom_prompt_manual'] = True
    context.user_data['came_from_custom_prompt'] = True
    context.user_data.pop('user_input_for_llama', None)

    current_prompt = context.user_data.get('prompt', '')
    text = (
        f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n`{escape_md(current_prompt)}`"
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_style_selection")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def ask_for_aspect_ratio(update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    user_id = update.effective_user.id if isinstance(update, Update) else update.from_user.id
    came_from_custom = context.user_data.get('came_from_custom_prompt', False)
    back_callback = "enter_custom_prompt_manual" if came_from_custom else "back_to_style_selection"

    text = escape_md("üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=update,
        reply_markup=await create_aspect_ratio_keyboard(back_callback),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_aspect_ratio(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    aspect_ratio = callback_data.replace("aspect_", "")
    context.user_data['aspect_ratio'] = aspect_ratio

    generation_type = context.user_data.get('generation_type', 'unknown')
    prompt = context.user_data.get('prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')

    generation_type_display = {
        'with_avatar': '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
        'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
        'ai_video': 'AI-–≤–∏–¥–µ–æ (Kling 1.6)',
        'ai_video_v2': 'AI-–≤–∏–¥–µ–æ (Kling 2.0)',
        'prompt_assist': '–° –ø–æ–º–æ—â–Ω–∏–∫–æ–º AI'
    }.get(generation_type, generation_type)

    prompt_source = ""
    selected_gender = context.user_data.get('selected_gender')
    current_style_set = context.user_data.get('current_style_set')

    if current_style_set == 'new_male_avatar':
        prompt_source = "üë® –ú—É–∂—Å–∫–æ–π —Å—Ç–∏–ª—å"
        for style_key, style_name in NEW_MALE_AVATAR_STYLES.items():
            if new_male_avatar_prompts.get(style_key) == prompt:
                prompt_source += f": {style_name}"
                break
    elif current_style_set == 'new_female_avatar':
        prompt_source = "üë© –ñ–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å"
        for style_key, style_name in NEW_FEMALE_AVATAR_STYLES.items():
            if new_female_avatar_prompts.get(style_key) == prompt:
                prompt_source += f": {style_name}"
                break
    elif current_style_set == 'generic_avatar':
        prompt_source = "üé® –û–±—â–∏–π —Å—Ç–∏–ª—å"
        for style_key, style_name in GENERATION_STYLES.items():
            if style_prompts.get(style_key) == prompt:
                prompt_source += f": {style_name}"
                break

    if context.user_data.get('came_from_custom_prompt'):
        if context.user_data.get('user_input_for_llama'):
            prompt_source = "ü§ñ –ü—Ä–æ–º–ø—Ç –æ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞"
        else:
            prompt_source = "‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç"

    prompt_preview = prompt[:150] + '...' if len(prompt) > 150 else prompt

    confirm_text_parts = [
        f"üìã –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n",
        f"üé® –¢–∏–ø: {escape_md(generation_type_display)}\n"
    ]

    if prompt_source:
        confirm_text_parts.append(f"üìù –í—ã–±–æ—Ä: {escape_md(prompt_source)}\n")

    confirm_text_parts.extend([
        f"üìê –§–æ—Ä–º–∞—Ç: {escape_md(aspect_ratio)}\n",
        f"\nüí≠ –ü—Ä–æ–º–ø—Ç: _{escape_md(prompt_preview)}_\n\n",
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    ])

    confirm_text = "".join(confirm_text_parts)

    await send_message_with_fallback(
        context.bot, user_id, confirm_text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_generation")],
            [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="back_to_style_selection")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_back_to_style_selection(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è."""
    current_style_set = context.user_data.get('current_style_set', 'generic_avatar')

    if current_style_set == 'new_male_avatar':
        await handle_style_selection(query, context, user_id, "select_new_male_avatar_styles")
    elif current_style_set == 'new_female_avatar':
        await handle_style_selection(query, context, user_id, "select_new_female_avatar_styles")
    else:
        await handle_style_selection(query, context, user_id, "select_generic_avatar_styles")

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_confirm_generation –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ callbacks.py –Ω–∞ —ç—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

async def handle_confirm_generation(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    generation_type = context.user_data.get('generation_type')
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if generation_type == 'admin_with_user_avatar':
        # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ 'with_avatar'
        context.user_data['generation_type'] = 'with_avatar'
        generation_type = 'with_avatar'
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å 'admin_with_user_avatar' –Ω–∞ 'with_avatar' –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º model_key –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not context.user_data.get('model_key'):
        if generation_type in ['with_avatar', 'photo_to_photo']:
            context.user_data['model_key'] = 'flux-trained'
        elif generation_type in ['ai_video', 'ai_video_v2']:
            # –ü–æ–ª—É—á–∞–µ–º model_key –∏–∑ GENERATION_TYPE_TO_MODEL_KEY
            from config import GENERATION_TYPE_TO_MODEL_KEY
            model_key = None
            for gt, mk in GENERATION_TYPE_TO_MODEL_KEY.items():
                if generation_type == gt:
                    # –ù–∞—Ö–æ–¥–∏–º model_key –ø–æ model_id
                    for mk_candidate, model_config in IMAGE_GENERATION_MODELS.items():
                        if model_config['id'] == mk:
                            model_key = mk_candidate
                            break
                    break
            
            if model_key:
                context.user_data['model_key'] = model_key
            else:
                # Fallback –¥–ª—è –≤–∏–¥–µ–æ
                context.user_data['model_key'] = 'kling-v1.6-pro' if generation_type == 'ai_video' else 'kling-v2.0'
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            context.user_data['model_key'] = 'flux-trained'
        
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω model_key='{context.user_data['model_key']}' –¥–ª—è generation_type='{generation_type}'")
    
    # –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è photo_to_photo
    if generation_type == 'photo_to_photo':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['reference_image_url', 'prompt', 'aspect_ratio']
        missing_fields = [f for f in required_fields if not context.user_data.get(f)]
        
        if missing_fields:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è photo_to_photo: {missing_fields}")
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é."),
                update_or_query=query,
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reference_url = context.user_data.get('reference_image_url')
        if not reference_url or not reference_url.startswith('http'):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π reference_image_url: {reference_url}")
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md("‚ùå –û—à–∏–±–∫–∞: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
                update_or_query=query,
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, generation_type={generation_type}, "
                f"model_key={context.user_data.get('model_key')}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {list(context.user_data.keys())}")
    logger.info(f"prompt: {context.user_data.get('prompt', '–ù–ï–¢')}")
    logger.info(f"aspect_ratio: {context.user_data.get('aspect_ratio', '–ù–ï–¢')}")
    logger.info(f"generation_type: {context.user_data.get('generation_type', '–ù–ï–¢')}")
    logger.info(f"model_key: {context.user_data.get('model_key', '–ù–ï–¢')}")
    
    # –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è photo_to_photo
    if generation_type == 'photo_to_photo':
        logger.info(f"reference_image_url: {context.user_data.get('reference_image_url', '–ù–ï–¢')}")
        logger.info(f"photo_path: {context.user_data.get('photo_path', '–ù–ï–¢')}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π update –æ–±—ä–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        if generation_type in ['with_avatar', 'photo_to_photo']:
            await generate_image(update, context, num_outputs=2)
        elif generation_type in ['ai_video', 'ai_video_v2']:
            await handle_generate_video(update, context)
        else:
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
                update_or_query=query,
                reply_markup=await create_generate_menu_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_type}")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_generation: {e}", exc_info=True)
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."),
            update_or_query=query,
            reply_markup=await create_generate_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_rating(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    rating = int(callback_data.split('_')[1])
    generation_type = context.user_data.get('generation_type', 'unknown')
    model_key = context.user_data.get('model_key', 'unknown')

    await add_rating(user_id, generation_type, model_key, rating)

    await safe_answer_callback(query, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} ‚≠ê!", show_alert=True)

    await send_message_with_fallback(
        context.bot, user_id,
        escape_md(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} ‚≠ê! –¢–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ."),
        update_or_query=query,
        reply_markup=await create_main_menu_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===

async def handle_user_profile(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."""
    await delete_all_videos(context, user_id)
    reset_generation_context(context, "user_profile")

    subscription_data = await check_subscription(user_id)
    if not subscription_data or len(subscription_data) < 9:
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
            update_or_query=query,
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    generations_left, avatar_left = subscription_data[0], subscription_data[1]

    text = (
        f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {generations_left} —Ñ–æ—Ç–æ, {avatar_left} –∞–≤–∞—Ç–∞—Ä{'–æ–≤' if avatar_left != 1 else ''}"
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=await create_user_profile_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_check_subscription(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    subscription_data = await check_subscription(user_id)
    if not subscription_data or len(subscription_data) < 9:
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    generations_left, avatar_left, _, username, _, _, email, _, _, _ = subscription_data

    email_text = f"\nüìß Email: {email}" if email else ""

    text = (
        f"üí≥ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
        f"üì∏ –§–æ—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {generations_left}\n"
        f"üë§ –ê–≤–∞—Ç–∞—Ä—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {avatar_left}"
        f"{email_text}\n\n"
        f"_–§–æ—Ç–æ —Ç—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ._\n"
        f"_–ê–≤–∞—Ç–∞—Ä—ã –Ω—É–∂–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π._"
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="subscribe")],
            [InlineKeyboardButton("üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_user_stats(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"handle_user_stats: user_id={user_id}")

    try:
        gen_stats = await get_user_generation_stats(user_id)
        logger.debug(f"gen_stats –¥–ª—è user_id={user_id}: {gen_stats}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è gen_stats –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        gen_stats = {}

    try:
        payments = await get_user_payments(user_id)
        total_spent = sum(p[2] for p in payments if p[2] is not None)
        logger.debug(f"payments –¥–ª—è user_id={user_id}: {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π, total_spent={total_spent}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è payments –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        payments = []
        total_spent = 0.0

    try:
        async with aiosqlite.connect('users.db') as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT referred_id, status, completed_at FROM referrals WHERE referrer_id = ?", (user_id,))
            my_referrals = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(my_referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        my_referrals = []

    active_referrals = 0
    total_bonuses = 0

    for ref in my_referrals:
        ref_user_id = ref['referred_id']
        ref_status = ref['status']
        ref_data = await check_subscription(ref_user_id)
        has_purchased = ref_status == 'completed' or (ref_data and len(ref_data) > 5 and not bool(ref_data[5]))
        if has_purchased:
            active_referrals += 1
            total_bonuses += 5

    stats_text = escape_md("üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n")

    if gen_stats:
        stats_text += escape_md("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n")
        type_names = {
            'with_avatar': '–§–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º',
            'photo_to_photo': '–§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É',
            'ai_video': 'AI-–≤–∏–¥–µ–æ (1.6)',
            'ai_video_v2': 'AI-–≤–∏–¥–µ–æ (2.0)',
            'train_flux': '–û–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤',
            'prompt_assist': '–ü–æ–º–æ—â—å —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏'
        }
        for gen_type, count in gen_stats.items():
            type_name = type_names.get(gen_type, gen_type)
            stats_text += escape_md(f"  ‚Ä¢ {type_name}: {count}\n")
    else:
        stats_text += escape_md("_–¢—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª_\n")

    stats_text += escape_md(f"\nüíµ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} RUB\n")
    stats_text += escape_md(f"üí≥ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {len(payments)}\n")
    stats_text += escape_md(f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å –ø–æ–∫—É–ø–∫–æ–π): {active_referrals}\n")
    stats_text += escape_md(f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö —Ñ–æ—Ç–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_bonuses}\n")

    bot_username = context.bot.username
    stats_text += escape_md(f"\nüîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`t.me/{bot_username}?start=ref_{user_id}`")

    await send_message_with_fallback(
        context.bot, user_id, stats_text, update_or_query=query,
        reply_markup=await create_referral_keyboard(user_id, bot_username),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_subscribe(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤."""
    await delete_all_videos(context, user_id)
    subscription_data = await check_subscription(user_id)
    first_purchase = bool(subscription_data[5]) if subscription_data and len(subscription_data) > 5 else True

    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
    text = (
        "üî• –ì–æ—Ä—è—á–∏–π –≤—ã–±–æ—Ä –¥–ª—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ\\!\n\n"
        "–•–æ—á–µ—à—å –∫—Ä—É—Ç—ã–µ –∫–∞–¥—Ä—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç\\? "
        "–í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç –∏ –ø–æ–ª—É—á–∞–π —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\\!\n\n"
        "üíé **–ù–ê–®–ò –ü–ê–ö–ï–¢–´:**\n"
        "üì∏ 399‚ÇΩ –∑–∞ 10 —Ñ–æ—Ç–æ\n"
        "üì∏ 599‚ÇΩ –∑–∞ 30 —Ñ–æ—Ç–æ\n"
        "üì∏ 1199‚ÇΩ –∑–∞ 70 —Ñ–æ—Ç–æ\n"
        "üì∏ 3119‚ÇΩ –∑–∞ 170 —Ñ–æ—Ç–æ \\+ 1 –∞–≤–∞—Ç–∞—Ä\n"
        "üì∏ 4599‚ÇΩ –∑–∞ 250 —Ñ–æ—Ç–æ \\+ 1 –∞–≤–∞—Ç–∞—Ä\n"
        "üë§ 590‚ÇΩ –∑–∞ 1 –∞–≤–∞—Ç–∞—Ä\n\n"
    )
    
    if first_purchase:
        text += "üéÅ **–ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ –∫ –ª—é–±–æ–º—É –∫—É–ø–ª–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –≤–ø–µ—Ä–≤—ã–µ 1 –ê–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫\\!**\n\n"
    
    text += "–í—ã–±–∏—Ä–∞–π —Å–≤–æ–π –ø–∞–∫–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Ç–≤–æ—Ä–∏—Ç—å\\! üöÄ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üì∏ 10 —Ñ–æ—Ç–æ - 399‚ÇΩ", callback_data="pay_399")],
        [InlineKeyboardButton("üì∏ 30 —Ñ–æ—Ç–æ - 599‚ÇΩ", callback_data="pay_599")],
        [InlineKeyboardButton("üì∏ 70 —Ñ–æ—Ç–æ - 1199‚ÇΩ", callback_data="pay_1199")],
        [InlineKeyboardButton("üì∏ 170 —Ñ–æ—Ç–æ + –∞–≤–∞—Ç–∞—Ä - 3119‚ÇΩ", callback_data="pay_3119")],
        [InlineKeyboardButton("üì∏ 250 —Ñ–æ—Ç–æ + –∞–≤–∞—Ç–∞—Ä - 4599‚ÇΩ", callback_data="pay_4599")],
        [InlineKeyboardButton("üë§ 1 –∞–≤–∞—Ç–∞—Ä - 590‚ÇΩ", callback_data="pay_590")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="tariff_info")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_payment(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    amount_str = callback_data.replace("pay_", "")

    tariff_key = None
    for key, details in TARIFFS.items():
        if str(int(details["amount"])) == amount_str:
            tariff_key = key
            break

    if not tariff_key:
        await safe_answer_callback(query, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    tariff = TARIFFS[tariff_key]
    amount = tariff["amount"]
    description = tariff["display"]

    context.user_data['payment_amount'] = amount
    context.user_data['payment_description'] = description
    context.user_data['payment_tariff_key'] = tariff_key

    subscription_data = await check_subscription(user_id)
    email = subscription_data[6] if subscription_data and len(subscription_data) > 6 else None

    if email:
        context.user_data['email'] = email
        try:
            bot_username = context.bot.username
            payment_url = await create_payment_link(user_id, email, amount, description, bot_username)

            is_first_purchase = bool(subscription_data[5]) if subscription_data and len(subscription_data) > 5 else True
            bonus_text = " (+ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫!)" if is_first_purchase and tariff.get("photos", 0) > 0 else ""

            payment_text = (
                f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞\n"
                f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏: {escape_md(description)}{escape_md(bonus_text)}\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} RUB\n\n"
                f"üîó [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa]({payment_url})\n\n"
                f"_–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏._"
            )

            await send_message_with_fallback(
                context.bot, user_id, payment_text, update_or_query=query,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            await send_message_with_fallback(
                context.bot, user_id,
                escape_md(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}"),
                update_or_query=query,
                reply_markup=await create_subscription_keyboard(),
                parse_mode=ParseMode.MARKDOWN_V2
            )
    else:
        context.user_data['awaiting_email'] = True
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md(f"üìß –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ \"{description}\" ({amount:.2f} RUB) –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º", callback_data="subscribe")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_change_email(query, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ email."""
    subscription_data = await check_subscription(user_id)
    current_email = subscription_data[6] if subscription_data and len(subscription_data) > 6 else None
    
    if current_email:
        text = (
            f"üìß –ò–∑–º–µ–Ω–µ–Ω–∏–µ email\n\n"
            f"–¢–µ–∫—É—â–∏–π email: `{current_email}`\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å:"
        )
    else:
        text = (
            f"üìß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ email\n\n"
            f"–£ –≤–∞—Å –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω email.\n"
            f"–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:"
        )
    
    context.user_data['awaiting_email_change'] = True
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_confirm_change_email(query, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è email."""
    new_email = context.user_data.get('new_email_to_confirm')
    
    if not new_email:
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞: email –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await update_resources(user_id, "update_email", email=new_email)
    context.user_data.pop('new_email_to_confirm', None)
    
    await safe_answer_callback(query, "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", show_alert=True)
    
    await send_message_with_fallback(
        context.bot, user_id,
        escape_md(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_email}"),
        update_or_query=query,
        reply_markup=await create_user_profile_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –ê–í–ê–¢–ê–†–´ ===

async def handle_my_avatars(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await delete_all_videos(context, user_id)
    reset_generation_context(context, "my_avatars")

    text = escape_md("üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=await create_avatar_selection_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_select_avatar(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    avatar_id = int(callback_data.split('_')[2])

    await update_resources(user_id, "set_active_avatar", amount=avatar_id)

    await safe_answer_callback(query, "‚úÖ –ê–≤–∞—Ç–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)

    await handle_my_avatars(query, context, user_id)

async def handle_train_flux(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    if not await check_resources(context, user_id, required_avatars=1):
        return

    reset_generation_context(context, "train_flux")
    context.user_data['training_step'] = 'upload_photos'
    context.user_data['training_photos'] = []

    text = (
    "üé® –°–û–ó–î–ê–ù–ò–ï –í–ê–®–ï–ì–û-–ê–í–ê–¢–ê–†–ê\n\n"
    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15-20) —Å –ê–ö–¶–ï–ù–¢–û–ú –Ω–∞ –ª–∏—Ü–æ. "
    "–ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π, —á—Ç–æ–±—ã PixelPie —Ç–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª –≤–∞—à–∏ —á–µ—Ä—Ç—ã.\n\n"
    "üì∏ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê:\n"
    "‚Ä¢ –§–û–¢–û–ì–†–ê–§–ò–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–†–Ø–ú–´–ú–ò, –ß–ï–¢–ö–ò–ú–ò, –ë–ï–ó –ò–°–ö–ê–ñ–ï–ù–ò–ô –ò –†–ê–ó–ú–´–¢–ò–Ø. –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–º–µ—Ä—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º.\n"
    "‚Ä¢ –°–Ω–∏–º–∞–π –≤ –ø—Ä–∞–∏–ª—å–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–∞—Ö:–õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–Ω–æ, –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏.\n"
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç, –∑–æ–ª–æ—Ç–æ–π —á–∞—Å, –º—è–≥–∫–∏–π —Å—Ç—É–¥–∏–π–Ω—ã–π —Å–≤–µ—Ç. –ò–ó–ë–ï–ì–ê–ô –¢–ï–ú–ù–´–• –¢–ï–ù–ï–ô –ò –ü–ï–†–ï–°–í–ï–¢–û–í.\n"
    "‚Ä¢ –§–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–º–µ–±–µ–ª—å, —Ä–∞—Å—Ç–µ–Ω–∏—è, –∂–∏–≤–æ—Ç–Ω—ã–µ). –ù–ï –î–û–ü–£–°–ö–ê–Æ–¢–°–Ø –ó–ï–†–ö–ê–õ–ê –ò –û–¢–†–ê–ñ–ï–ù–ò–Ø.\n"
    "‚Ä¢ –°–Ω–∏–º–∞–π —Ç–æ–ª—å–∫–æ —Å–µ–±—è. –ì–†–£–ü–ü–û–í–´–ï –§–û–¢–û –ò–õ–ò –§–û–¢–û –° –î–†–£–ì–ò–ú–ò –õ–Æ–î–¨–ú–ò –ù–ï –ü–û–î–•–û–î–Ø–¢.\n"
    "‚Ä¢ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –û–ß–ö–ò, –®–õ–Ø–ü–´, –ú–ê–°–ö–ò –ò–õ–ò –î–†–£–ì–ò–ï –ê–ö–°–ï–°–°–£–ê–†–´, –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –ª–∏—Ü–æ. –ú–∞–∫–∏—è–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º.\n"
    "‚Ä¢ –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–ª–∏ –ª–µ–≥–∫–∞—è —É–ª—ã–±–∫–∞. –ò–ó–ë–ï–ì–ê–ô –ö–†–ò–í–õ–Ø–ù–ò–ô –ò–õ–ò –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –≠–ú–û–¶–ò–ô.\n"
    "‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ä–∞–∫—É—Ä—Å—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ñ–æ–Ω), —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–≤–∞—Ç–∞—Ä.\n\n"
    "‚ö†Ô∏è –í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —à—É–º–∞ –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. "
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∏–∑–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –±—É–¥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ö–ê–ß–ï–°–¢–í–û –ê–í–¢–ê–†–ê.\n\n"
    "üì§ –ù–∞—á–∏–Ω–∞–π –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_profile")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_continue_upload(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    photo_count = len(context.user_data.get('training_photos', []))

    text = escape_md(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ \"–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\".")

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=await create_training_keyboard(user_id, photo_count),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_start_training(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, update: Update):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞."""
    photo_count = len(context.user_data.get('training_photos', []))

    if photo_count < 10:
        await safe_answer_callback(query, f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ! –°–µ–π—á–∞—Å {photo_count}.", show_alert=True)
        return

    context.user_data['training_step'] = 'enter_avatar_name'

    text = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ.\n\n"
        f"üè∑ –¢–µ–ø–µ—Ä—å –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ò–º—è –∏–ª–∏ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –í–∞—à–µ–≥–æ –ê–≤–∞—Ç–∞—Ä–∞"
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_confirm_start_training(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, update: Update):
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    await start_training(update, context)

async def handle_back_to_avatar_name(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∞."""
    context.user_data['training_step'] = 'enter_avatar_name'

    photo_count = len(context.user_data.get('training_photos', []))
    text = (
        f"üè∑ –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ–π —Å—Ç–∏–ª—å\", \"–ë–∏–∑–Ω–µ—Å-–æ–±—Ä–∞–∑\").\n"
        f"–£ —Ç–µ–±—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ {photo_count} —Ñ–æ—Ç–æ."
    )

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ", callback_data="continue_upload")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_use_suggested_trigger(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞."""
    trigger_word = callback_data.replace("use_suggested_trigger_", "")
    context.user_data['trigger_word'] = trigger_word
    context.user_data['training_step'] = 'confirm_training'

    from handlers.messages import handle_trigger_word_input
    await handle_trigger_word_input(query, context, trigger_word)

async def handle_confirm_photo_quality(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, update: Update):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º."""
    avatar_name = context.user_data.get('avatar_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
    photo_count = len(context.user_data.get('training_photos', []))

    final_confirm_text = (
        f"üëç –û—Ç–ª–∏—á–Ω–æ\\! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ –ò–º—è –∞–≤–∞—Ç–∞—Ä–∞: {escape_md(avatar_name)}\n"
        f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {photo_count} —à—Ç\\.\n\n"
        f"üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è\\!\n"
        f"‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 3\\-5 –º–∏–Ω—É—Ç\\.\n"
        f"üíé –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω 1 –∞–≤–∞—Ç–∞—Ä —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\\.\n\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º?"
    )

    await send_message_with_fallback(
        context.bot, user_id, final_confirm_text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!", callback_data="confirm_start_training")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="train_flux")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –†–ï–§–ï–†–ê–õ–´ ===

async def handle_referrals_menu(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        async with aiosqlite.connect('users.db') as conn:
            cursor = await conn.cursor()
            
            # –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
            total_referrals = (await cursor.fetchone())[0]
            
            # –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE referrer_id = ? AND first_purchase IS NOT NULL
            """, (user_id,))
            paid_referrals = (await cursor.fetchone())[0]
            
            # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤
            bonus_photos = paid_referrals * 5  # 5 —Ñ–æ—Ç–æ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {e}")
        total_referrals = 0
        paid_referrals = 0
        bonus_photos = 0
    
    bot_username = context.bot.username or "bot"
    referral_link = f"t.me/{bot_username}?start=ref_{user_id}"
    
    text = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {total_referrals}\n"
        f"‚Ä¢ –°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É: {paid_referrals}\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_photos} —Ñ–æ—Ç–æ\n\n"
        f"üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ!\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"`{referral_link}`"
    )
    
    keyboard = await create_referral_keyboard(user_id, bot_username)
    
    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_referral_info(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    text = (
        "üéÅ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n"
        "1\\. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n"
        "2\\. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
        "3\\. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É \\- –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5 —Ñ–æ—Ç–æ\n"
        "4\\. –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 1 –±–æ–Ω—É—Å–Ω–æ–µ —Ñ–æ—Ç–æ\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–≤–æ–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n\n"
        "üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π \\- –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="copy_referral_link")],
        [InlineKeyboardButton("üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_copy_referral_link(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    bot_username = context.bot.username or "bot"
    referral_link = f"t.me/{bot_username}?start=ref_{user_id}"

    text = (
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"`{referral_link}`\n\n"
        f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", 
         url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π –∫—Ä—É—Ç–æ–π AI-–±–æ—Ç! ü§ñ")],
        [InlineKeyboardButton("üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

    await safe_answer_callback(query, "üìã –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é!", show_alert=True)

async def handle_referral_help(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º."""
    text = (
        "‚ùì –ü–æ–º–æ—â—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n\n"
        "üîó –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:\n"
        "1\\. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "2\\. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É\n"
        "3\\. –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "4\\. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\n\n"
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å? –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\\!\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –±–æ–Ω—É—Å? –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ –°–≥–æ—Ä–∞—é—Ç –ª–∏ –±–æ–Ω—É—Å—ã? –ù–µ—Ç, –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
        "üí¨ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã \\- –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("üîô –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º", callback_data="referrals")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_my_referrals(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ–Ω—É—Å–æ–≤."""
    logger.debug(f"handle_my_referrals: user_id={user_id}")

    try:
        async with aiosqlite.connect('users.db') as conn:
            conn.row_factory = aiosqlite.Row
            c = await conn.cursor()
            await c.execute("SELECT referred_id, status, created_at, completed_at FROM referrals WHERE referrer_id = ?", (user_id,))
            my_referrals = await c.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(my_referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        my_referrals = []

    text = f"üë• –¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n"

    total_bonuses = 0
    active_referrals = 0

    if my_referrals:
        text += f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(my_referrals)} —á–µ–ª–æ–≤–µ–∫\n\n"

        for ref in my_referrals[-10:]:
            ref_user_id = ref['referred_id']
            ref_date = ref['created_at']
            ref_status = ref['status']
            completed_at = ref['completed_at']

            ref_data = await check_subscription(ref_user_id)
            has_purchased = ref_status == 'completed' or (ref_data and len(ref_data) > 5 and not bool(ref_data[5]))
            status = "üí≥ –°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É" if has_purchased else "‚è≥ –ë–µ–∑ –ø–æ–∫—É–ø–æ–∫"

            if has_purchased:
                active_referrals += 1
                total_bonuses += 5

            text += f"‚Ä¢ ID {ref_user_id} - {ref_date} ({escape_md(status)})\n"
            if completed_at and has_purchased:
                text += f"  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_at}\n"
    else:
        text += "_–¢—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª_\n"
        logger.info(f"–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è user_id={user_id}")

    text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤:\n"
    text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å –ø–æ–∫—É–ø–∫–æ–π): {active_referrals}\n"
    text += f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ñ–æ—Ç–æ: {total_bonuses}\n"

    bot_username = context.bot.username
    text += f"\nüîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`t.me/{bot_username}?start=ref_{user_id}`\n\n"
    text += "_–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, —Ç—ã –ø–æ–ª—É—á–∏—à—å +5 —Ñ–æ—Ç–æ!_"

    await send_message_with_fallback(
        context.bot, user_id, escape_md(text), update_or_query=query,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                url=f"https://t.me/share/url?url=t.me/{bot_username}?start=ref_{user_id}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ PixelPie!")],
            [InlineKeyboardButton("üîô –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="user_stats")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –†–ê–ó–î–ï–õ–´ ===

async def handle_payment_history(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π."""
    try:
        payments = await get_user_payments(user_id, limit=10)

        if not payments:
            text = (
                "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π\\.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç\\!"
            )
        else:
            text = "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n\n"

            for payment in payments:
                payment_id, amount, payment_type, created_at = payment[:4]

                date_str = created_at.strftime("%d.%m.%Y") if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                amount_str = f"{amount:.0f}‚ÇΩ" if amount > 0 else f"{amount:.0f}‚ÇΩ"

                text += f"üìÖ {date_str} ‚Ä¢ {amount_str}\n"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="subscribe")],
            [InlineKeyboardButton("üîô –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")]
        ])

        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=query,
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await safe_answer_callback(query, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

async def handle_tariff_info(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö."""
    text = (
        "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö\n\n"
        "üì∏ –§–æ—Ç–æ \\- —Ä–µ—Å—É—Ä—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "üë§ –ê–≤–∞—Ç–∞—Ä—ã \\- —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n\n"
        "üîÑ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1\\. –ü–æ–∫—É–ø–∞–µ—Ç–µ –ø–∞–∫–µ—Ç —Ñ–æ—Ç–æ\n"
        "2\\. –°–æ–∑–¥–∞–µ—Ç–µ –∞–≤–∞—Ç–∞—Ä \\(—Ç—Ä–∞—Ç–∏—Ç—Å—è 1 –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ 590‚ÇΩ\\)\n"
        "3\\. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç–µ —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º \\(—Ç—Ä–∞—Ç–∏—Ç—Å—è —Ñ–æ—Ç–æ\\)\n\n"
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n"
        "üì∏ –û—Ç 399‚ÇΩ –∑–∞ 10 —Ñ–æ—Ç–æ \\(—Å—Ç–∞—Ä—Ç–æ–≤—ã–π\\)\n"
        "üì∏ –î–æ 4599‚ÇΩ –∑–∞ 250 —Ñ–æ—Ç–æ \\+ –∞–≤–∞—Ç–∞—Ä \\(–º–∞–∫—Å–∏–º—É–º\\)\n"
        "üë§ –û—Ç–¥–µ–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä \\- 590‚ÇΩ\n\n"
        "üéÅ –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ \\- –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç", callback_data="subscribe")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_category_info(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö."""
    text = (
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        "üé® –§–æ—Ç–æ—Å–µ—Å—Å–∏—è \\- —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å –≤–∞—à–∏–º –∞–≤–∞—Ç–∞—Ä–æ–º\n"
        "üñº –§–æ—Ç–æ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É \\- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é\n"
        "üé¨ AI\\-–≤–∏–¥–µ–æ \\- —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤\n\n"
        "‚ÑπÔ∏è –î–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –Ω—É–∂–µ–Ω –æ–±—É—á–µ–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä\\.\n"
        "‚ÑπÔ∏è –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–≤–∞—Ç–∞—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\\."
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data="generate_menu")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_compare_tariffs(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤."""
    text = (
        "üíé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤\n\n"
        "üì∏ 10 —Ñ–æ—Ç–æ \\- 399‚ÇΩ \\(39\\.9‚ÇΩ –∑–∞ —Ñ–æ—Ç–æ\\)\n"
        "üì∏ 30 —Ñ–æ—Ç–æ \\- 599‚ÇΩ \\(20‚ÇΩ –∑–∞ —Ñ–æ—Ç–æ\\)\n"
        "üì∏ 70 —Ñ–æ—Ç–æ \\- 1199‚ÇΩ \\(17\\.1‚ÇΩ –∑–∞ —Ñ–æ—Ç–æ\\)\n"
        "üì∏ 170 —Ñ–æ—Ç–æ \\+ –∞–≤–∞—Ç–∞—Ä \\- 3119‚ÇΩ \\(18\\.3‚ÇΩ –∑–∞ —Ñ–æ—Ç–æ\\)\n"
        "üì∏ 250 —Ñ–æ—Ç–æ \\+ –∞–≤–∞—Ç–∞—Ä \\- 4599‚ÇΩ \\(18\\.4‚ÇΩ –∑–∞ —Ñ–æ—Ç–æ\\)\n"
        "üë§ 1 –∞–≤–∞—Ç–∞—Ä \\- 590‚ÇΩ\n\n"
        "üí° –°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π: 70 —Ñ–æ—Ç–æ –∑–∞ 1199‚ÇΩ\\!\n"
        "üéÅ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: 250 —Ñ–æ—Ç–æ \\+ –∞–≤–∞—Ç–∞—Ä\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç", callback_data="subscribe")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_aspect_ratio_info(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å—Ç–æ—Ä–æ–Ω."""
    text = (
        "üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω\n\n"
        "üì± –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ: –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π\n"
        "üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ: –¥–ª—è —à–∏—Ä–æ–∫–∏—Ö –∫–∞–¥—Ä–æ–≤\n"
        "üì≤ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ: –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏ Stories\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\."
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞", callback_data="back_to_aspect_selection")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_back_to_aspect_selection(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω."""
    await ask_for_aspect_ratio(query, context)

async def handle_support(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞."""
    text = (
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        "üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚ùì –ò–∑—É—á–∏—Ç–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
        "ü§ù –ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—É—é –ø—Ä–æ–±–ª–µ–º—É\\!"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/AXIDI_Help")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data="user_guide")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_faq(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
    text = (
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∏ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ?", callback_data="faq_photo")],
        [InlineKeyboardButton("üé¨ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ?", callback_data="faq_video")],
        [InlineKeyboardButton("üë§ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä?", callback_data="faq_avatar")],
        [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º", callback_data="faq_prompts")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", callback_data="faq_problems")],
        [InlineKeyboardButton("üíé –û –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="faq_subscription")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_faq_topic(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, topic: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã FAQ."""
    
    faq_texts = {
        "photo": {
            "title": "üì∏ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ?",
            "text": (
                "üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
                "   ‚Ä¢ –° –∞–≤–∞—Ç–∞—Ä–æ–º - –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ\n"
                "   ‚Ä¢ –ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É - –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
                "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç\n"
                "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω\n"
                "5Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
                "üí° –°–æ–≤–µ—Ç: –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –ø—Ä–æ–º–ø—Ç, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
        },
        "video": {
            "title": "üé¨ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ?",
            "text": (
                "üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ 'AI-–≤–∏–¥–µ–æ'\n"
                "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                "4Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∞–Ω–∏–º–∞—Ü–∏—é\n"
                "5Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                "‚è± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç\n"
                "üìπ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 3-5 —Å–µ–∫—É–Ω–¥"
            )
        },
        "avatar": {
            "title": "üë§ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä?",
            "text": (
                "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä' –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ\n"
                "2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ 10-20 —Ñ–æ—Ç–æ:\n"
                "   ‚Ä¢ –†–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã\n"
                "   ‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "   ‚Ä¢ –ß–µ—Ç–∫–æ–µ –ª–∏—Ü–æ\n\n"
                "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ\n"
                "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—É—á–µ–Ω–∏—è (30-40 –º–∏–Ω—É—Ç)\n\n"
                "‚úÖ –ü–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!"
            )
        },
        "prompts": {
            "title": "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º",
            "text": (
                "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º\n\n"
                "‚úÖ –•–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
                "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ\n"
                "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:\n"
                "'–ü–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å, –º—è–≥–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, "
                "–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ'\n\n"
                "‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
                "‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n"
                "‚Ä¢ –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π"
            )
        },
        "problems": {
            "title": "‚ùì –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
            "text": (
                "‚ùì –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è\n\n"
                "üî¥ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:\n"
                "‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n"
                "üî¥ –ê–≤–∞—Ç–∞—Ä –Ω–µ –ø–æ—Ö–æ–∂:\n"
                "‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª—å—à–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ\n\n"
                "üî¥ –î–æ–ª–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:\n"
                "‚Üí –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
                "üî¥ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
                "‚Üí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "üí¨ –ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            )
        },
        "subscription": {
            "title": "üíé –û –ø–æ–¥–ø–∏—Å–∫–µ",
            "text": (
                "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
                "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n"
                "‚Ä¢ –°—Ç–∞—Ä—Ç - –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º\n"
                "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä\n"
                "‚Ä¢ –ü—Ä–µ–º–∏—É–º - –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n"
                "‚úÖ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n\n"
                "üí∞ –†–µ—Å—É—Ä—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!"
            )
        }
    }
    
    if topic not in faq_texts:
        await safe_answer_callback(query, "‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    info = faq_texts[topic]
    escaped_text = escape_md(info["text"])
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await send_message_with_fallback(
        context.bot, user_id, escaped_text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

# === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

async def handle_admin_panel(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    if user_id not in ADMIN_IDS:
        await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = await create_admin_keyboard(user_id)
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_give_subscription(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data['giving_sub_to_user'] = True

    text = (
        "üíé –í—ã–¥–∞—á–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
        "–§–æ—Ä–º–∞—Ç: `ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á_—Ç–∞—Ä–∏—Ñ–∞`\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:\n"
    )

    for key, details in TARIFFS.items():
        if key != "admin_premium":
            text += f"‚Ä¢ `{key}` - {escape_md(details['display'])}\n"

    text += "\n–ü—Ä–∏–º–µ—Ä: `123456789 –ø—Ä–µ–º–∏—É–º`"

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_give_sub_to_user(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, target_user_id: int):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    context.user_data['giving_sub_to_user'] = target_user_id

    text = (
        f"üíé –í—ã–¥–∞—á–∞ –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞:\n"
    )

    for key, details in TARIFFS.items():
        if key != "admin_premium":
            text += f"‚Ä¢ `{key}` - {escape_md(details['display'])}\n"

    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_add_resources(query, context: ContextTypes.DEFAULT_TYPE, user_id: int,
                                   target_user_id: int, resource_type: str, amount: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ñ–æ—Ç–æ –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä—ã) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {amount} {resource_type} –¥–ª—è target_user_id={target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º user_id={user_id}")

    await send_typing_action(context.bot, user_id)

    target_user_info = await check_subscription(target_user_id)
    if not target_user_info or (target_user_info[3] is None and target_user_info[8] is None):
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    action = "increment_photo" if resource_type == "photo" else "increment_avatar"
    resource_name = "—Ñ–æ—Ç–æ" if resource_type == "photo" else "–∞–≤–∞—Ç–∞—Ä"

    try:
        success = await update_resources(target_user_id, action, amount=amount)
        logger.debug(f"update_resources –¥–ª—è user_id={target_user_id}, action={action}, amount={amount}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={success}")

        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        text = escape_md(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {resource_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID `{target_user_id}`.")

        await send_message_with_fallback(
            context.bot, user_id, text, update_or_query=query,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=escape_md(f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {amount} {resource_name}!"),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} {resource_type} –¥–ª—è user_id={target_user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {resource_type} –¥–ª—è user_id={target_user_id}: {e}", exc_info=True)
        await send_message_with_fallback(
            context.bot, user_id,
            escape_md(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {resource_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{target_user_id}`: {str(e)}"),
            update_or_query=query,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def handle_admin_chat_with_user(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, target_user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    context.user_data['awaiting_chat_message'] = target_user_id
    
    text = escape_md(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_admin_reset_avatar(query, context: ContextTypes.DEFAULT_TYPE, user_id: int, target_user_id: int) -> None:
    """–°–±—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    confirm_text = (
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} –∏ —Å–±—Ä–æ—Å–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤–∞—Ç–∞—Ä.\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
    )
    
    await send_message_with_fallback(
        context.bot, user_id, escape_md(confirm_text), update_or_query=query,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"reset_avatar_{target_user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_actions_{target_user_id}")]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –†–ê–°–°–´–õ–ö–ò ===

async def initiate_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, broadcast_type: str) -> int:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await safe_answer_callback(query, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return ConversationHandler.END
    
    context.user_data['broadcast_type'] = broadcast_type
    context.user_data[f'awaiting_{broadcast_type}_message'] = True
    
    broadcast_type_display = {
        'broadcast_all': '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        'broadcast_paid': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π',
        'broadcast_non_paid': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏'
    }.get(broadcast_type, '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    
    text = (
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ {escape_md(broadcast_type_display)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n"
        f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="send_broadcast_no_text")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )
    
    return 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è ConversationHandler

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def delete_menu_video_if_exists(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."""
    if 'menu_video_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=user_id,
                message_id=context.user_data['menu_video_message_id']
            )
            context.user_data.pop('menu_video_message_id', None)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –º–µ–Ω—é: {e}")

async def create_payment_success_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    try:
        subscription_data = await check_subscription(user_id)
        has_avatars = subscription_data and len(subscription_data) >= 2 and subscription_data[1] > 0
        
        keyboard = []
        
        if has_avatars:
            keyboard.extend([
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="train_flux")],
                [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_menu")]
            ])
        else:
            keyboard.extend([
                [InlineKeyboardButton("‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="generate_menu")],
                [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="subscribe")]
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")],
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", callback_data="faq")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        return InlineKeyboardMarkup(keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_menu")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="user_profile")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def handle_admin_send_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id not in ADMIN_IDS:
        return
        
    parts = query.data.split(':')
    target_user_id = int(parts[1])
    generation_data = context.user_data.get(f'last_admin_generation_{target_user_id}')
    
    if generation_data and generation_data.get('image_urls'):
        try:
            caption = escape_md("üéÅ –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            
            await context.bot.send_photo(
                chat_id=target_user_id,
                photo=generation_data['image_urls'][0],
                caption=caption,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", show_alert=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await send_message_with_fallback(
                context.bot, query.from_user.id,
                escape_md(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"),
                update_or_query=update,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"user_actions_{target_user_id}")]]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    else:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)

async def handle_admin_regenerate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º."""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id not in ADMIN_IDS:
        return
    
    target_user_id = int(query.data.split(':')[1])
    await generate_photo_for_user(update, context, target_user_id)

async def handle_admin_style_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    style = query.data.replace('admin_style_', '')
    target_user_id = context.user_data.get('admin_generation_for_user')
    
    if not target_user_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return
    
    if style == 'custom':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        await query.message.edit_text(
            escape_md("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
                     f"–¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ '{context.user_data.get('active_trigger_word', '')}' –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        context.user_data['awaiting_admin_prompt'] = True
        context.user_data['admin_generation_style'] = 'custom'
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        await query.message.edit_text(
            escape_md(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '{style}'..."),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        context.user_data['style_name'] = style
        context.user_data['prompt'] = get_style_prompt(style)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await generate_image(query, context)

def get_style_prompt(style: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""
    style_prompts_dict = {
        'portrait': "professional portrait photo, studio lighting, high quality",
        'casual': "casual photo, natural lighting, relaxed pose",
        'artistic': "artistic photo, creative composition, dramatic lighting",
        'business': "business portrait, formal attire, professional setting",
        'outdoor': "outdoor photo, natural environment, golden hour lighting",
        'indoor': "indoor photo, cozy interior, warm lighting",
    }
    return style_prompts_dict.get(style, "high quality photo")

async def handle_admin_custom_prompt(message, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞."""
    if not context.user_data.get('awaiting_admin_prompt'):
        return
    
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return
    
    custom_prompt = message.text
    target_user_id = context.user_data.get('admin_generation_for_user')
    
    if not target_user_id:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await message.reply_text(
        escape_md("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º..."),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    context.user_data['awaiting_admin_prompt'] = False
    context.user_data['prompt'] = custom_prompt
    context.user_data['style_name'] = 'custom'
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    await generate_image(message, context)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    try:
        await status_message.delete()
    except:
        pass

# === –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(
    AWAITING_BROADCAST_MESSAGE, AWAITING_BROADCAST_CONFIRM,
    AWAITING_PAYMENT_DATES, AWAITING_USER_SEARCH, AWAITING_BALANCE_CHANGE,
    AWAITING_BROADCAST_FILTERS, AWAITING_BROADCAST_SCHEDULE,
    AWAITING_ACTIVITY_DATES
) = range(8)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò –°–¢–ê–¢–£–°–û–í ===

async def handle_training_notification(context: ContextTypes.DEFAULT_TYPE, user_id: int, status: str, model_name: str = ""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞."""
    try:
        if status == "success":
            text = (
                f"üéâ–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –∞–≤–∞—Ç–∞—Ä '{model_name}' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n\n"
                f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ AI-–∞–≤–∞—Ç–∞—Ä–∞.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ!"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate_with_avatar")],
                [InlineKeyboardButton("üë• –ú–æ–∏ –∞–≤–∞—Ç–∞—Ä—ã", callback_data="my_avatars")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        elif status == "failed":
            text = (
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ '{model_name}' –Ω–µ —É–¥–∞–ª–æ—Å—å.\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ\n"
                f"‚Ä¢–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É\n"
                f"‚Ä¢–õ–∏—Ü–∞ –ø–ª–æ—Ö–æ –≤–∏–¥–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö\n\n"
                f"üíé –ê–≤–∞—Ç–∞—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ."
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="train_flux")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        else:
            return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            
        await send_message_with_fallback(
            context.bot, user_id, escape_md(text),
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_generation_notification(context: ContextTypes.DEFAULT_TYPE, user_id: int, 
                                      generation_type: str, success: bool, result_data: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        if success and result_data:
            if generation_type in ['ai_video', 'ai_video_v2']:
                text = (
                    f"üé¨ –¢–≤–æ–µ AI-–≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\n"
                    f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ.\n"
                    f"–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!"
                )
            else:
                text = (
                    f"üì∏ –¢–≤–æ–∏ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤—ã!\n\n"
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n"
                    f"–û—Ü–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"
                )
                
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="generate_menu")],
                [InlineKeyboardButton("üë• –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_result")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        else:
            text = (
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
                f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="generate_menu")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
        await send_message_with_fallback(
            context.bot, user_id, escape_md(text),
            reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –ò –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô ===

async def handle_callback_error(update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ callback —Ñ—É–Ω–∫—Ü–∏—è—Ö."""
    user_id = update.effective_user.id if update.effective_user else 0
    callback_data = update.callback_query.data if update.callback_query else "unknown"
    
    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback '{callback_data}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}", exc_info=True)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, 'user_data') and context.user_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        important_keys = ['user_id', 'username', 'email']
        filtered_data = {k: v for k, v in context.user_data.items() if k in important_keys}
        context.user_data.clear()
        context.user_data.update(filtered_data)
    
    error_text = (
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n"
        "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –í –ú–µ–Ω—é", callback_data="back_to_menu")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="faq")]
    ])
    
    try:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            await send_message_with_fallback(
                context.bot, user_id, escape_md(error_text),
                update_or_query=update, reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            await send_message_with_fallback(
                context.bot, user_id, escape_md(error_text),
                reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
            )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò –ò –ü–†–û–í–ï–†–ö–ò ===

async def validate_user_permissions(user_id: int, required_permission: str = "user") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if required_permission == "admin":
            return user_id in ADMIN_IDS
        elif required_permission == "user":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
            user_data = await check_subscription(user_id)
            return user_data is not None
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def validate_callback_data(callback_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if not callback_data or len(callback_data) > 64:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        import string
        allowed_chars = string.ascii_letters + string.digits + "_:-"
        if not all(c in allowed_chars for c in callback_data):
            return False
            
        return True
    except Exception:
        return False

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ú–ï–î–ò–ê ===

async def process_media_for_broadcast(context: ContextTypes.DEFAULT_TYPE, media_type: str, media_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        if media_type == "photo":
            return await context.bot.get_file(media_id)
        elif media_type == "video":
            return await context.bot.get_file(media_id)
        elif media_type == "document":
            return await context.bot.get_file(media_id)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ {media_type}:{media_id}: {e}")
        return None

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

async def get_user_activity_summary(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        summary = {
            'total_generations': 0,
            'total_avatars': 0,
            'total_spent': 0.0,
            'registration_date': None,
            'last_activity': None,
            'favorite_generation_type': 'unknown'
        }
        
        async with aiosqlite.connect('users.db') as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await cursor.execute("""
                SELECT MIN(created_at) as first_activity 
                FROM (
                    SELECT created_at FROM payments WHERE user_id = ?
                    UNION ALL
                    SELECT timestamp FROM user_ratings WHERE user_id = ?
                    UNION ALL
                    SELECT timestamp FROM generation_log WHERE user_id = ?
                    UNION ALL
                    SELECT created_at FROM trained_models WHERE user_id = ?
                )
            """, (user_id, user_id, user_id, user_id))
            
            first_activity_result = await cursor.fetchone()
            if first_activity_result and first_activity_result['first_activity']:
                summary['registration_date'] = first_activity_result['first_activity']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await cursor.execute("""
                SELECT MAX(last_activity) as last_activity 
                FROM (
                    SELECT created_at as last_activity FROM payments WHERE user_id = ?
                    UNION ALL
                    SELECT timestamp as last_activity FROM user_ratings WHERE user_id = ?
                    UNION ALL
                    SELECT timestamp as last_activity FROM generation_log WHERE user_id = ?
                    UNION ALL
                    SELECT updated_at as last_activity FROM trained_models WHERE user_id = ?
                )
            """, (user_id, user_id, user_id, user_id))
            
            last_activity_result = await cursor.fetchone()
            if last_activity_result and last_activity_result['last_activity']:
                summary['last_activity'] = last_activity_result['last_activity']
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤
            await cursor.execute("""
                SELECT COUNT(*) as total_avatars 
                FROM trained_models 
                WHERE user_id = ? AND status = 'success'
            """, (user_id,))
            
            avatars_result = await cursor.fetchone()
            if avatars_result:
                summary['total_avatars'] = avatars_result['total_avatars']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        gen_stats = await get_user_generation_stats(user_id)
        if gen_stats:
            summary['total_generations'] = sum(gen_stats.values())
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—é–±–∏–º—ã–π —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if gen_stats:
                summary['favorite_generation_type'] = max(gen_stats.items(), key=lambda x: x[1])[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
        payments = await get_user_payments(user_id)
        if payments:
            summary['total_spent'] = sum(p[2] for p in payments if p[2] is not None)
        
        return summary
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è user_id={user_id}: {e}")
        return {}

# === –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò –ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ===

async def cleanup_user_context(context: ContextTypes.DEFAULT_TYPE, user_id: int, keep_essential: bool = True):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not hasattr(context, 'user_data') or not context.user_data:
            return
        
        if keep_essential:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            essential_keys = [
                'user_id', 'username', 'email', 'registration_date',
                'subscription_data', 'active_model_version', 'active_trigger_word'
            ]
            filtered_data = {k: v for k, v in context.user_data.items() if k in essential_keys}
            context.user_data.clear()
            context.user_data.update(filtered_data)
        else:
            context.user_data.clear()
            
        logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω (keep_essential={keep_essential})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def validate_generation_context(context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    try:
        required_fields = ['generation_type', 'model_key']
        return all(field in context.user_data for field in required_fields)
    except Exception:
        return False

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–û–ë–´–¢–ò–ô ===

async def handle_user_guide(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = (
        "üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üéØ–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:\n"
        "1\\.–ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç —Ñ–æ—Ç–æ\n"
        "2\\.–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä\n"
        "3\\.–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n\n"
        "üì∏–¢–∏–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        "‚Ä¢–° –∞–≤–∞—Ç–∞—Ä–æ–º \\- –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ\n"
        "‚Ä¢–ü–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É \\- –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è\n"
        "‚Ä¢AI\\-–≤–∏–¥–µ–æ \\- –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏–∫–∏\n\n"
        "üí°–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
        "‚Ä¢–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ —Å—Ç–∏–ª—è–º–∏\n"
        "‚Ä¢–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", callback_data="generate_menu")],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="support")]
    ])
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_share_result(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
    bot_username = context.bot.username or "bot"
    share_text = "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ —è —Å–æ–∑–¥–∞–ª —Å –ø–æ–º–æ—â—å—é AI! ü§ñ‚ú®"
    share_url = f"https://t.me/share/url?url=t.me/{bot_username}&text={share_text}"
    
    text = (
        "üì§ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!\n\n"
        "–ü–æ–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º, –∫–∞–∫–∏–µ –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ —Ç—ã —Å–æ–∑–¥–∞–µ—à—å —Å –ø–æ–º–æ—â—å—é AI\\!\n"
        "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Ç–æ–∂–µ –∑–∞—Ö–æ—Ç—è—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å\\."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", url=share_url)],
        [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="generate_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await send_message_with_fallback(
        context.bot, user_id, text, update_or_query=query,
        reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2
    )

# === –§–ò–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def handle_unknown_callback(query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö."""
    await safe_answer_callback(query, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_message_with_fallback(
        context.bot, user_id,
        escape_md("üîÑ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!"),
        update_or_query=query,
        reply_markup=await create_main_menu_keyboard(user_id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

# === –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô ===

__all__ = [
    'button',
    'handle_proceed_to_payment',
    'handle_generate_menu',
    'handle_generate_with_avatar',
    'handle_style_selection',
    'handle_style_choice',
    'handle_photo_to_photo',
    'handle_ai_video',
    'handle_custom_prompt_manual',
    'handle_custom_prompt_llama',
    'handle_confirm_assisted_prompt',
    'handle_edit_assisted_prompt',
    'handle_aspect_ratio',
    'handle_back_to_style_selection',
    'handle_confirm_generation',
    'handle_rating',
    'handle_user_profile',
    'handle_check_subscription',
    'handle_user_stats',
    'handle_subscribe',
    'handle_payment',
    'handle_my_avatars',
    'handle_select_avatar',
    'handle_train_flux',
    'handle_continue_upload',
    'handle_start_training',
    'handle_confirm_start_training',
    'handle_back_to_avatar_name',
    'handle_use_suggested_trigger',
    'handle_confirm_photo_quality',
    'handle_my_referrals',
    'handle_admin_panel',
    'handle_admin_give_subscription',
    'handle_admin_give_sub_to_user',
    'handle_admin_add_resources',
    'handle_admin_chat_with_user',
    'handle_admin_reset_avatar',
    'handle_change_email',
    'handle_confirm_change_email',
    'handle_referrals_menu',
    'handle_referral_info',
    'handle_copy_referral_link',
    'handle_referral_help',
    'handle_payment_history',
    'handle_tariff_info',
    'handle_category_info',
    'handle_compare_tariffs',
    'handle_aspect_ratio_info',
    'handle_back_to_aspect_selection',
    'handle_support',
    'handle_faq',
    'handle_faq_topic',
    'handle_skip_mask',
    'handle_male_styles_page',
    'handle_female_styles_page',
    'ask_for_aspect_ratio',
    'delete_all_videos',
    'delete_menu_video_if_exists',
    'initiate_broadcast',
    'create_payment_success_keyboard',
    'handle_admin_send_generation',
    'handle_admin_regenerate',
    'handle_admin_style_selection',
    'handle_admin_custom_prompt',
    'get_style_prompt',
    'handle_training_notification',
    'handle_generation_notification',
    'handle_callback_error',
    'validate_user_permissions',
    'validate_callback_data',
    'process_media_for_broadcast',
    'get_user_activity_summary',
    'cleanup_user_context',
    'validate_generation_context',
    'handle_user_guide',
    'handle_share_result',
    'handle_unknown_callback'
]