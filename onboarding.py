# handlers/onboarding.py

import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import pytz
from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, Message, CallbackQuery, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import aiosqlite
from config import DATABASE_PATH, TARIFFS, ADMIN_IDS
from handlers.utils import safe_escape_markdown as escape_md, get_tariff_text
from database import check_database_user, get_user_payments, is_old_user
from keyboards import create_subscription_keyboard, create_main_menu_keyboard

logger = logging.getLogger(__name__)

onboarding_router = Router()

# –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
EXAMPLE_IMAGES = [
    "images/example1.jpg",
    "images/example2.jpg",
    "images/example3.jpg",
]

async def send_onboarding_message(bot: Bot, user_id: int, message_type: str, subscription_data: Optional[tuple] = None, first_purchase: bool = False) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö."""
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ {message_type} –¥–ª—è user_id={user_id}")
    bot_username = (await bot.get_me()).username.lstrip('@') or "PixelPieBot"
    username = subscription_data[3] if subscription_data and len(subscription_data) > 3 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    first_name = subscription_data[8] if subscription_data and len(subscription_data) > 8 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
    is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} is_old_user={is_old_user_flag}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if is_old_user_flag and message_type.startswith("reminder_"):
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {message_type} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è user_id={user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–π")
        return

    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_date = datetime.now(moscow_tz)
    if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
        try:
            registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
        except ValueError as e:
            logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ subscription_data[10] –¥–ª—è user_id={user_id}: {subscription_data[10]}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞. –û—à–∏–±–∫–∞: {e}")
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ subscription_data –¥–ª—è user_id={user_id}: {subscription_data}")
    
    current_time = datetime.now(moscow_tz)
    days_since_registration = (current_time.date() - registration_date.date()).days
    time_since_registration = (current_time - registration_date).total_seconds()
    logger.debug(f"–î–ª—è user_id={user_id}: days_since_registration={days_since_registration}, time_since_registration={time_since_registration} —Å–µ–∫—É–Ω–¥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–≤—à–∏–º
    payments = await get_user_payments(user_id)
    is_paying_user = len(payments) > 0
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è user_id={user_id}: is_paying_user={is_paying_user}, payments={payments}")
    if not first_purchase and subscription_data and len(subscription_data) > 5:
        first_purchase = bool(subscription_data[5])
    logger.debug(f"first_purchase –¥–ª—è user_id={user_id}: {first_purchase}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    tariff_key = None
    if message_type == "proceed_to_tariff":
        if days_since_registration == 0:
            if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
            elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                tariff_key = "–ª–∞–π—Ç"
            else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                tariff_key = "–º–∏–Ω–∏"
        elif days_since_registration == 1:
            tariff_key = "–ª–∞–π—Ç"
        elif days_since_registration <= 3:
            tariff_key = "–º–∏–Ω–∏"
        else:
            tariff_key = None  # –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã
    elif message_type == "tariff_–∫–æ–º—Ñ–æ—Ä—Ç":
        tariff_key = "–∫–æ–º—Ñ–æ—Ä—Ç"
    elif message_type == "tariff_–ª–∞–π—Ç":
        tariff_key = "–ª–∞–π—Ç"
    elif message_type == "tariff_–º–∏–Ω–∏":
        tariff_key = "–º–∏–Ω–∏"
    elif message_type in ("reminder_day2", "reminder_day3", "reminder_day4", "reminder_day5"):
        if message_type == "reminder_day2" and days_since_registration == 1:  # –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å
            tariff_key = "–ª–∞–π—Ç"
        elif message_type == "reminder_day3" and days_since_registration == 2:  # –¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å
            tariff_key = "–ª–∞–π—Ç"
        elif message_type == "reminder_day4" and days_since_registration == 3:  # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –¥–µ–Ω—å
            tariff_key = "–º–∏–Ω–∏"
        elif message_type == "reminder_day5" and days_since_registration >= 4:  # –ü—è—Ç—ã–π –¥–µ–Ω—å
            tariff_key = None  # –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã
    logger.debug(f"–í—ã–±—Ä–∞–Ω tariff_key={tariff_key} –¥–ª—è message_type={message_type}")

    messages = {
        "welcome": {
            "text": escape_md(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø ‚Äî PixelPie üç™\n"
                "–¢–≤–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ —Å —Ç–≤–æ–∏–º –ª–∏—Ü–æ–º. –ù–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ç–æ—à–æ–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ –º–∞–≥–∏—è –ø–∏–∫—Å–µ–ª–µ–π!\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                "üç™ –°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ —Å–≤–æ–∏–º —Ñ–æ—Ç–æ\n"
                "üç™ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π\n"
                "üç™ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –æ–∂–∏–≤–ª—è—Ç—å –∏—Ö –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–¥–µ—è–º–∏\n"
                "üç™ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑—ã –≤ –∫–∞–Ω–∞–ª–µ: @pixelpie_idea\n\n"
                "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
                "–ì–æ—Ç–æ–≤? –ñ–º–∏ –Ω–∏–∂–µ, –Ω–∞—á–Ω—ë–º!",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöÄ –ù–∞—á–∞—Ç—å",
                    callback_data="proceed_to_tariff" if not is_paying_user else "subscribe"
                )]
            ]),
            "with_images": True
        },
        "proceed_to_tariff": {
            "text": escape_md(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞! üöÄ\n\n" +
                ("üíé –¢–∞—Ä–∏—Ñ '–ö–æ–º—Ñ–æ—Ä—Ç' –∑–∞ 1199‚ÇΩ\n"
                 "üç™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ!\n\n"
                 "1199‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 60%\n"
                 "‚è≥ –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω—É—Ç!\n\n"
                 "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                 "‚úÖ 70 —Ñ–æ—Ç–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                 "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                 "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                 "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                 "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: @pixelpie_idea\n\n"
                 "üì• –°–¥–µ–ª–∞–π –∞–≤–∞—Ç–∞—Ä, –∫–∞–∫ —É —Ç–æ–ø–æ–≤—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤ ‚Äî –±–µ–∑ —Å—Ç—É–¥–∏–∏ –∏ —Ñ–æ—Ç–æ—à–æ–ø–∞" if days_since_registration == 0 and time_since_registration <= 1800 else
                 "‚è≥ –¢–∞—Ä–∏—Ñ '–õ–∞–π—Ç' –∑–∞ 599‚ÇΩ\n"
                 "üç™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç!\n\n"
                 "üî• 599‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 80%\n\n"
                 "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                 "‚úÖ 30 —Ñ–æ—Ç–æ\n"
                 "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                 "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                 "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                 "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @pixelpie_idea" if (days_since_registration == 0 and time_since_registration > 1800 and time_since_registration <= 5400) or days_since_registration == 1 else
                 "üß™ –¢–∞—Ä–∏—Ñ '–ú–∏–Ω–∏' –∑–∞ 399‚ÇΩ\n"
                 "üç™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç ‚Äî –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –±–æ–ª—å—à–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π:\n\n"
                 "‚úÖ 10 —Ñ–æ—Ç–æ\n"
                 "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                 "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
                 "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–¥–µ—è–º –∏–∑ @pixelpie_idea\n"
                 "üí≥ –í—Å–µ–≥–æ 399‚ÇΩ ‚Äî —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –∑–∞—Ö–æ–¥–∏—Ç PixelPie!\n"
                 "üò± –¢–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è!" if days_since_registration <= 3 else
                 "üç™ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—á–µ–Ω—å–∫–∞, –º–æ–π –¥—Ä—É–≥! üç™\n"
                 "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—á–µ–∑–Ω–µ—Ç‚Ä¶\n"
                 "–ê —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω PixelPie.\n\n"
                 "‚è≥ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ:\n\n"
                 "‚úîÔ∏è 1199‚ÇΩ –∑–∞ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (–≤–º–µ—Å—Ç–æ 2999‚ÇΩ)\n"
                 "‚úîÔ∏è –ò–ª–∏ 599‚ÇΩ –∑–∞ –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç\n"
                 "‚úîÔ∏è –ò–ª–∏ 399‚ÇΩ –∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç\n"
                 "‚úîÔ∏è –ò–ª–∏ 590‚ÇΩ —Ç–æ–ª—å–∫–æ –∑–∞ –∞–≤–∞—Ç–∞—Ä\n\n"
                 "üì∏ –¢—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–∞ –∏ –Ω–∞—á–Ω—ë—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–±–æ–π ‚Äî –≤ –ª—é–±–æ–º –æ–±—Ä–∞–∑–µ.\n\n"
                 "–•–æ—á–µ—à—å —É—Å–ø–µ—Ç—å?"),
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí≥ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ",
                    callback_data="pay_1199" if days_since_registration == 0 and time_since_registration <= 1800 else
                                 "pay_599" if (days_since_registration == 0 and time_since_registration > 1800 and time_since_registration <= 5400) or days_since_registration == 1 else
                                 "pay_399"
                )] if days_since_registration <= 3 else [
                    InlineKeyboardButton(text="üíé 1199‚ÇΩ –∑–∞ 70 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_1199"),
                    InlineKeyboardButton(text="üíé 599‚ÇΩ –∑–∞ 30 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_599"),
                    InlineKeyboardButton(text="üíé 399‚ÇΩ –∑–∞ 10 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_399"),
                    InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä (590‚ÇΩ)", callback_data="pay_590")
                ],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]) if days_since_registration <= 3 else await create_subscription_keyboard(hide_mini_tariff=False),
            "with_images": False
        },
        "tariff_–∫–æ–º—Ñ–æ—Ä—Ç": {
            "text": escape_md(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞! üöÄ\n\n"
                "üíé –¢–∞—Ä–∏—Ñ '–ö–æ–º—Ñ–æ—Ä—Ç' –∑–∞ 1199‚ÇΩ\n"
                "üç™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ!\n\n"
                "1199‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 60%\n"
                "‚è≥ –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω—É—Ç!\n\n"
                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                "‚úÖ 70 —Ñ–æ—Ç–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: @pixelpie_idea\n\n"
                "üì• –°–¥–µ–ª–∞–π –∞–≤–∞—Ç–∞—Ä, –∫–∞–∫ —É —Ç–æ–ø–æ–≤—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤ ‚Äî –±–µ–∑ —Å—Ç—É–¥–∏–∏ –∏ —Ñ–æ—Ç–æ—à–æ–ø–∞",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data="pay_1199")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            "with_images": False
        },
        "tariff_–ª–∞–π—Ç": {
            "text": escape_md(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –ù–µ —É—Å–ø–µ–ª –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ? üöÄ\n\n"
                "‚è≥ –¢–∞—Ä–∏—Ñ '–õ–∞–π—Ç' –∑–∞ 599‚ÇΩ\n"
                "üç™ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç!\n\n"
                "üî• 599‚ÇΩ –≤–º–µ—Å—Ç–æ 2999‚ÇΩ ‚Äî —Å–∫–∏–¥–∫–∞ 80%\n\n"
                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
                "‚úÖ 30 —Ñ–æ—Ç–æ\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                "‚úÖ –ò–¥–µ–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ @pixelpie_idea",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data="pay_599")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            "with_images": False
        },
        "tariff_–º–∏–Ω–∏": {
            "text": escape_md(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –•–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üöÄ\n\n"
                "üß™ –¢–∞—Ä–∏—Ñ '–ú–∏–Ω–∏' –∑–∞ 399‚ÇΩ\n"
                "üç™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç ‚Äî –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –±–æ–ª—å—à–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π:\n\n"
                "‚úÖ 10 —Ñ–æ—Ç–æ\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
                "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–¥–µ—è–º –∏–∑ @pixelpie_idea\n"
                "üí≥ –í—Å–µ–≥–æ 399‚ÇΩ ‚Äî —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –∑–∞—Ö–æ–¥–∏—Ç PixelPie!\n"
                "üò± –¢–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è!",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data="pay_399")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            "with_images": False
        },
        "reminder_day2": {
            "text": escape_md(
                f"üç™ PixelPie —Å–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏, {first_name}!\n\n"
                "–¢—ã –∑–∞–ø—É—Å—Ç–∏–ª –º–µ–Ω—è‚Ä¶ –∏ –≤—Å—ë. –ê —è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ üò¢\n\n"
                "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –ø—Ä–æ—Å—Ç—ã–µ:\n"
                "1. –í—ã–±–∏—Ä–∞–µ—à—å —Ç–∞—Ä–∏—Ñ\n"
                "2. –ó–∞–≥—Ä—É–∂–∞–µ—à—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ\n"
                "3. –Ø —Å–æ–∑–¥–∞—é —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä\n"
                "4. –ò‚Ä¶ –º–∞–≥–∏—è! ‚ú®\n\n"
                "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 30 –ø–µ—á–µ–Ω–µ–∫ + 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 599‚ÇΩ",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ù–∞—á–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="pay_599")]
            ]),
            "with_images": False
        },
        "reminder_day3": {
            "text": escape_md(
                f"üç™ –≠–π, {first_name}! PixelPie –∑–æ–≤—ë—Ç —Ç–µ–±—è!\n\n"
                "–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª —Å–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä üò±\n"
                "–ó–Ω–∞—á–∏—Ç, –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ‚Äî –∞ —ç—Ç–æ –∂–µ —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ!\n\n"
                "–í–æ—Ç —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n"
                "‚úÖ 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ\n"
                "‚úÖ 30 —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö\n"
                "‚úÖ –û–∂–∏–≤–ª–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º!\n\n"
                "üî• –í—Å—ë —ç—Ç–æ –∑–∞ 599‚ÇΩ",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="pay_599")]
            ]),
            "with_images": False
        },
        "reminder_day4": {
            "text": escape_md(
                f"üç™ –ü–æ—á—Ç–∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è, {first_name}!\n\n"
                "–¢—ã –∑–∞–ø—É—Å—Ç–∏–ª PixelPie, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî\n"
                "–∞ –∏–º–µ–Ω–Ω–æ –Ω–µ –≤—ã–±—Ä–∞–ª –ø–∞–∫–µ—Ç –∏ –Ω–µ —Å–æ–∑–¥–∞–ª –∞–≤–∞—Ç–∞—Ä.\n\n"
                "–ò—Å–ø—Ä–∞–≤–∏–º?\n\n"
                "üéÅ –î–µ—Ä–∂–∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 10 –ø–µ—á–µ–Ω–µ–∫ + 1 –∞–≤–∞—Ç–∞—Ä –≤ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 399‚ÇΩ\n\n"
                "–≠—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º –æ–¥–∏–Ω –∫–æ—Ñ–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ ‚òï\n"
                "–ù–æ —Å –∫—É—á–µ–π –∫—Ä—É—Ç—ã—Ö –æ–±—Ä–∞–∑–æ–≤.",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ó–∞–±—Ä–∞—Ç—å –∑–∞ 399‚ÇΩ –∏ –Ω–∞—á–∞—Ç—å", callback_data="pay_399")]
            ]),
            "with_images": False
        },
        "reminder_day5": {
            "text": escape_md(
                f"üç™ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—á–µ–Ω—å–∫–∞, {first_name} üç™\n\n"
                "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—á–µ–∑–Ω–µ—Ç‚Ä¶\n"
                "–ê —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω PixelPie.\n\n"
                "‚è≥ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–Ω–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–æ—Ç–æ:\n\n"
                "‚úîÔ∏è 1199‚ÇΩ –∑–∞ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (–≤–º–µ—Å—Ç–æ 2999‚ÇΩ)\n"
                "‚úîÔ∏è –ò–ª–∏ 599‚ÇΩ –∑–∞ –ø—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç\n"
                "‚úîÔ∏è –ò–ª–∏ 399‚ÇΩ –∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç\n"
                "‚úîÔ∏è –ò–ª–∏ 590‚ÇΩ —Ç–æ–ª—å–∫–æ –∑–∞ –∞–≤–∞—Ç–∞—Ä\n\n"
                "üì∏ –¢—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–≤–∞—Ç–∞—Ä–∞ –∏ –Ω–∞—á–Ω—ë—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–±–æ–π ‚Äî –≤ –ª—é–±–æ–º –æ–±—Ä–∞–∑–µ.\n\n"
                "–•–æ—á–µ—à—å —É—Å–ø–µ—Ç—å?",
                version=2
            ),
            "keyboard": InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíé 1199‚ÇΩ –∑–∞ 70 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_1199")],
                [InlineKeyboardButton(text="üíé 599‚ÇΩ –∑–∞ 30 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_599")],
                [InlineKeyboardButton(text="üíé 399‚ÇΩ –∑–∞ 10 –ø–µ—á–µ–Ω–µ–∫", callback_data="pay_399")],
                [InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä (590‚ÇΩ)", callback_data="pay_590")]
            ]),
            "with_images": False
        }
    }

    message_data = messages.get(message_type)
    if not message_data:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type} –¥–ª—è user_id={user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ welcome
    if message_type != "welcome" and is_paying_user:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã")
        tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True)
        subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
        await bot.send_message(
            chat_id=user_id,
            text=tariff_message_text,
            reply_markup=subscription_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if message_type.startswith(("tariff_", "reminder_")) and tariff_key:
        expected_tariff = None
        if message_type.startswith("tariff_"):
            # –î–ª—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
            if days_since_registration == 0:
                if time_since_registration <= 1800:  # –î–æ 30 –º–∏–Ω—É—Ç
                    expected_tariff = "–∫–æ–º—Ñ–æ—Ä—Ç"
                elif time_since_registration <= 5400:  # 30‚Äì90 –º–∏–Ω—É—Ç
                    expected_tariff = "–ª–∞–π—Ç"
                else:  # –ü–æ—Å–ª–µ 90 –º–∏–Ω—É—Ç
                    expected_tariff = "–º–∏–Ω–∏"
        else:
            # –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –¥–Ω—è–º
            if message_type == "reminder_day2" and days_since_registration == 1:  # –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å
                expected_tariff = "–ª–∞–π—Ç"
            elif message_type == "reminder_day3" and days_since_registration == 2:  # –¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å
                expected_tariff = "–ª–∞–π—Ç"
            elif message_type == "reminder_day4" and days_since_registration == 3:  # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –¥–µ–Ω—å
                expected_tariff = "–º–∏–Ω–∏"
            elif message_type == "reminder_day5" and days_since_registration >= 4:  # –ü—è—Ç—ã–π –¥–µ–Ω—å
                expected_tariff = None  # –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        
        if expected_tariff and tariff_key != expected_tariff:
            logger.warning(f"–¢–∞—Ä–∏—Ñ {tariff_key} –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è user_id={user_id} –Ω–∞ –¥–µ–Ω—å {days_since_registration}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_tariff}")
            new_message_type = f"tariff_{expected_tariff}" if expected_tariff in ("–∫–æ–º—Ñ–æ—Ä—Ç", "–ª–∞–π—Ç", "–º–∏–Ω–∏") else "subscribe"
            await send_onboarding_message(bot, user_id, new_message_type, subscription_data, first_purchase=first_purchase)
            return

    try:
        if message_data.get("with_images"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            media_group = []
            for img_path in EXAMPLE_IMAGES:
                if os.path.exists(img_path):
                    media_group.append(InputMediaPhoto(media=FSInputFile(path=img_path)))
                else:
                    logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {img_path}")
            if media_group:
                await bot.send_media_group(
                    chat_id=user_id,
                    media=media_group
                )
                logger.info(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å {len(media_group)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è user_id={user_id}")
        
        await bot.send_message(
            chat_id=user_id,
            text=message_data["text"],
            reply_markup=message_data["keyboard"],
            parse_mode=ParseMode.MARKDOWN_V2
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        if message_type.startswith("reminder_"):
            async with aiosqlite.connect(DATABASE_PATH) as conn:
                c = await conn.cursor()
                await c.execute(
                    "UPDATE users SET last_reminder_type = ?, last_reminder_sent = ? WHERE user_id = ?",
                    (message_type, datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S'), user_id)
                )
                await conn.commit()
                logger.debug(f"–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {message_type} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id={user_id}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            admin_message = escape_md(
                f"üì¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{message_type}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {user_id} (@{username})",
                version=2
            )
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id} –¥–ª—è user_id={user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_type} –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await bot.send_message(
            chat_id=user_id,
            text=escape_md("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @AXIDI_Help", version=2),
            reply_markup=await create_main_menu_keyboard(user_id),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=escape_md(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{message_type}' –¥–ª—è user_id={user_id}: {str(e)}", version=2),
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e_admin:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e_admin}")

async def schedule_tariff_messages(bot: Bot, user_id: int) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –õ–∞–π—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç, –ú–∏–Ω–∏ —á–µ—Ä–µ–∑ 90 –º–∏–Ω—É—Ç."""
    try:
        subscription_data = await check_database_user(user_id)
        if not subscription_data:
            logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}")
            return

        payments = await get_user_payments(user_id)
        if payments:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–µ–∂–∏, —Ç–∞—Ä–∏—Ñ–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è")
            return

        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_date = current_time
        if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
            try:
                registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
            except ValueError as e:
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ subscription_data[10] –¥–ª—è user_id={user_id}: {subscription_data[10]}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞. –û—à–∏–±–∫–∞: {e}")
                logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ subscription_data –¥–ª—è user_id={user_id}: {subscription_data}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        tariff_messages = [
            ("tariff_–ª–∞–π—Ç", registration_date + timedelta(minutes=30)),
            ("tariff_–º–∏–Ω–∏", registration_date + timedelta(minutes=90)),
        ]

        scheduler = AsyncIOScheduler(timezone=moscow_tz)
        for tariff_type, schedule_time in tariff_messages:
            job_id = f"tariff_{tariff_type}_{user_id}"
            if scheduler.get_job(job_id):
                logger.debug(f"–ó–∞–¥–∞—á–∞ {job_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            if schedule_time <= current_time:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É {job_id} –≤ –ø—Ä–æ—à–ª–æ–º: {schedule_time}")
                await send_onboarding_message(bot, user_id, tariff_type, subscription_data)
                continue
            logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {job_id} –¥–ª—è user_id={user_id} –Ω–∞ {schedule_time}")
            scheduler.add_job(
                send_onboarding_message,
                trigger='date',
                run_date=schedule_time,
                args=[bot, user_id, tariff_type, subscription_data],
                id=job_id,
                misfire_grace_time=300
            )
        scheduler.start()
        logger.info(f"–¢–∞—Ä–∏—Ñ–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è user_id={user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id={user_id}: {e}", exc_info=True)

async def schedule_onboarding_reminders(bot: Bot, user_id: int) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è."""
    try:
        subscription_data = await check_database_user(user_id)
        if not subscription_data or len(subscription_data) < 11:
            logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}")
            return
        
        payments = await get_user_payments(user_id)
        if payments:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–µ–∂–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–º
        is_old_user_flag = await is_old_user(user_id, cutoff_date="2025-07-11")
        if is_old_user_flag:
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ù–ï –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è user_id={user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—ã–π")
            return

        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_date = current_time
        if subscription_data and len(subscription_data) > 10 and subscription_data[10]:
            try:
                registration_date = moscow_tz.localize(datetime.strptime(subscription_data[10], '%Y-%m-%d %H:%M:%S'))
            except ValueError as e:
                logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ subscription_data[10] –¥–ª—è user_id={user_id}: {subscription_data[10]}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞. –û—à–∏–±–∫–∞: {e}")
                logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ subscription_data –¥–ª—è user_id={user_id}: {subscription_data}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è
        reminders = [
            ("reminder_day2", registration_date + timedelta(days=1)),
            ("reminder_day3", registration_date + timedelta(days=2)),
            ("reminder_day4", registration_date + timedelta(days=3)),
            ("reminder_day5", registration_date + timedelta(days=4)),
        ]

        scheduler = AsyncIOScheduler(timezone=moscow_tz)
        for reminder_type, schedule_time in reminders:
            job_id = f"reminder_{reminder_type}_{user_id}"
            if scheduler.get_job(job_id):
                logger.debug(f"–ó–∞–¥–∞—á–∞ {job_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            if schedule_time <= current_time:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É {job_id} –≤ –ø—Ä–æ—à–ª–æ–º: {schedule_time}")
                await send_onboarding_message(bot, user_id, reminder_type, subscription_data)
                continue
            logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {job_id} –¥–ª—è user_id={user_id} –Ω–∞ {schedule_time}")
            scheduler.add_job(
                send_onboarding_message,
                trigger='date',
                run_date=schedule_time,
                args=[bot, user_id, reminder_type, subscription_data],
                id=job_id,
                misfire_grace_time=300
            )
        scheduler.start()
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è user_id={user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è user_id={user_id}: {e}", exc_info=True)

async def proceed_to_payment_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä—ë–¥' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = callback_query.from_user.id
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 11:
        await callback_query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await callback_query.answer()
        return

    payments = await get_user_payments(user_id)
    first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True
    is_paying_user = len(payments) > 0
    logger.debug(f"proceed_to_payment_callback: user_id={user_id}, payments={payments}, payment_count={len(payments) if payments else 0}, first_purchase={first_purchase}, is_paying_user={is_paying_user}")

    if is_paying_user:
        # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True)
        subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
        await callback_query.message.answer(
            tariff_message_text,
            reply_markup=subscription_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ welcome
        await send_onboarding_message(bot, user_id, "welcome", subscription_data, first_purchase=first_purchase)
    
    await callback_query.answer()

async def proceed_to_tariff_callback(callback_query: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞—Ä–∏—Ñ–∞–º."""
    user_id = callback_query.from_user.id
    subscription_data = await check_database_user(user_id)
    if not subscription_data or len(subscription_data) < 11:
        await callback_query.message.answer(
            escape_md("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await callback_query.answer()
        return

    payments = await get_user_payments(user_id)
    first_purchase = bool(subscription_data[5]) if len(subscription_data) > 5 else True
    is_paying_user = len(payments) > 0
    logger.debug(f"proceed_to_tariff_callback: user_id={user_id}, payments={payments}, payment_count={len(payments) if payments else 0}, first_purchase={first_purchase}, is_paying_user={is_paying_user}")

    if is_paying_user:
        # –î–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariff_message_text = get_tariff_text(first_purchase=first_purchase, is_paying_user=True)
        subscription_kb = await create_subscription_keyboard(hide_mini_tariff=False)
        await callback_query.message.answer(
            tariff_message_text,
            reply_markup=subscription_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        # –î–ª—è –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–∑—ã–≤–∞–µ–º send_onboarding_message —Å —Ç–∏–ø–æ–º proceed_to_tariff
        await send_onboarding_message(bot, user_id, "proceed_to_tariff", subscription_data, first_purchase=first_purchase)
    
    await callback_query.answer()

def setup_onboarding_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    @onboarding_router.callback_query(lambda c: c.data == "proceed_to_payment")
    async def onboarding_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
        logger.debug(f"onboarding_callback_handler: Callback_query –ø–æ–ª—É—á–µ–Ω: id={query.id}, data={query.data}, user_id={query.from_user.id}")
        await proceed_to_payment_callback(query, state, query.bot)
    
    @onboarding_router.callback_query(lambda c: c.data == "proceed_to_tariff")
    async def tariff_callback_handler(query: CallbackQuery, state: FSMContext) -> None:
        logger.debug(f"tariff_callback_handler: Callback_query –ø–æ–ª—É—á–µ–Ω: id={query.id}, data={query.data}, user_id={query.from_user.id}")
        await proceed_to_tariff_callback(query, state, query.bot)